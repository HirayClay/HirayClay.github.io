<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ContentProvider 调用过程</title>
      <link href="/2020/07/23/ContentProvider-%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/07/23/ContentProvider-%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="涉及的类"><a href="#涉及的类" class="headerlink" title="涉及的类"></a>涉及的类</h4><pre>android.app.ContextImpl    public ContentResolver getContentResolver()android.app.ContextImpl.ApplicationContentResolver    protected IContentProvider acquireProvider(Context context, String auth)   </pre><h4 id="一般我们这么使用-contentProvider"><a href="#一般我们这么使用-contentProvider" class="headerlink" title="一般我们这么使用 contentProvider"></a>一般我们这么使用 contentProvider</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://wwww.baidu.com/q/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>getConentProvider 方法是 Context 的，Context 实现类是 ContextImpl</p><p>ContextImpl 中方法返回的是一个 成员变量：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ContentResolver <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mContentResolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个成员变量是一个 ApplicationContentResolver 对象，赋值是在 ContextImpl 的 构造函数中传参赋值：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token function">ContextImpl</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ContextImpl container<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> ActivityThread mainThread<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> LoadedApk packageInfo<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String splitName<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> IBinder activityToken<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> UserHandle user<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String overrideOpPackageName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        mContentResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContentResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mainThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 ContextImpl 的初始化和 Activity 的启动相关，可以看 Activity 启动流程相关的内容</p><p>这里ContentProvider 的实现已经清晰，继续进入 insert() 方法的调用</p><pre class="line-numbers language-java"><code class="language-java">IContentProvider provider <span class="token operator">=</span> <span class="token function">acquireProvider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进入 ApplicationContentResolver 的  acquireProvider 方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@UnsupportedAppUsage</span>        <span class="token keyword">protected</span> IContentProvider <span class="token function">acquireProvider</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String auth<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mMainThread<span class="token punctuation">.</span><span class="token function">acquireProvider</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>                    ContentProvider<span class="token punctuation">.</span><span class="token function">getAuthorityWithoutUserId</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">resolveUserIdFromAuthority</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又是调用了 ActivityThread 的同名方法：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@UnsupportedAppUsage</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> IContentProvider <span class="token function">acquireProvider</span><span class="token punctuation">(</span>            Context c<span class="token punctuation">,</span> String auth<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**        这里是 首先查看是否已经有缓存的 cp        */</span>                <span class="token keyword">final</span> IContentProvider provider <span class="token operator">=</span> <span class="token function">acquireExistingProvider</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> auth<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> stable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> provider<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ContentProviderHolder holder <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//远程调用</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getGetProviderLock</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                holder <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentProvider</span><span class="token punctuation">(</span>                        <span class="token function">getApplicationThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> stable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>holder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to find provider info for "</span> <span class="token operator">+</span> auth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Install provider will increment the reference count for us, and break</span>        <span class="token comment" spellcheck="true">// any ties in the race.</span>        holder <span class="token operator">=</span> <span class="token function">installProvider</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> holder<span class="token punctuation">,</span> holder<span class="token punctuation">.</span>info<span class="token punctuation">,</span>                <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*noisy*/</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span>noReleaseNeeded<span class="token punctuation">,</span> stable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> holder<span class="token punctuation">.</span>provider<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发起远程调用 拿到一个 ContentProviderHolder </p><pre class="line-numbers language-java"><code class="language-java">  holder <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentProvider</span><span class="token punctuation">(</span>                        <span class="token function">getApplicationThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> stable<span class="token punctuation">)</span><span class="token punctuation">;</span>```java Android  api <span class="token number">26</span> 以后已经弃用了 ActivityManagerNative（就是手写了实现了一遍 aidl ） ，可以直接看 IActivityManager<span class="token punctuation">.</span>aidl 中的定义然后进入 ActivityManagerService  ```java <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">IActivityManager<span class="token punctuation">.</span>Stub</span>  <span class="token keyword">implements</span> <span class="token class-name">Watchdog<span class="token punctuation">.</span>Monitor</span><span class="token punctuation">,</span> BatteryStatsImpl<span class="token punctuation">.</span>BatteryCallback<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getContentProvider 方法最后调用了 getContentProviderImpl 方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> ContentProviderHolder <span class="token function">getContentProviderImpl</span><span class="token punctuation">(</span>IApplicationThread caller<span class="token punctuation">,</span>            String name<span class="token punctuation">,</span> IBinder token<span class="token punctuation">,</span> <span class="token keyword">int</span> callingUid<span class="token punctuation">,</span> String callingPackage<span class="token punctuation">,</span> String callingTag<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> stable<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ContentProviderRecord cpr<span class="token punctuation">;</span>        ContentProviderConnection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        ProviderInfo cpi <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> providerRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ProcessRecord r <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//首先拿到调用者的进程记录</span>                r <span class="token operator">=</span> <span class="token function">getRecordForAppLocked</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span>                            <span class="token string">"Unable to find app for caller "</span> <span class="token operator">+</span> caller                          <span class="token operator">+</span> <span class="token string">" (pid="</span> <span class="token operator">+</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token operator">+</span> <span class="token string">") when getting content provider "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">boolean</span> checkCrossUser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: getProviderByName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// First check if this content provider has been published...</span>            cpr <span class="token operator">=</span> mProviderMap<span class="token punctuation">.</span><span class="token function">getProviderByName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>providerRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cpi <span class="token operator">=</span> cpr<span class="token punctuation">.</span>info<span class="token punctuation">;</span>                String msg<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//检查 provider的属性，配置了 multiprocess = true 会直接实例化一个实例运行在调用者的进程，也就是说并不会启动 contentProvider</span>                <span class="token comment" spellcheck="true">//所在的进程。后续直接返回到 </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cpr<span class="token punctuation">.</span><span class="token function">canRunHere</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token function">checkContentProviderAssociation</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> callingUid<span class="token punctuation">,</span> cpi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">"Content provider lookup "</span>                                <span class="token operator">+</span> cpr<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">flattenToShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token operator">+</span> <span class="token string">" failed: association not allowed with package "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ContentProviderHolder holder <span class="token operator">=</span> cpr<span class="token punctuation">.</span><span class="token function">newHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>provider <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">return</span> holder<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Don't expose providers between normal apps and instant apps</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">resolveContentProvider</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/*flags*/</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token function">checkContentProviderAssociation</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> callingUid<span class="token punctuation">,</span> cpi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">"Content provider lookup "</span>                            <span class="token operator">+</span> cpr<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">flattenToShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" failed: association not allowed with package "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span>                        <span class="token string">"getContentProviderImpl: before checkContentProviderPermission"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token function">checkContentProviderPermissionLocked</span><span class="token punctuation">(</span>cpi<span class="token punctuation">,</span> r<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> checkCrossUser<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span>                        <span class="token string">"getContentProviderImpl: after checkContentProviderPermission"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> origId <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: incProviderCountLocked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// In this case the provider instance already exists, so we can</span>                <span class="token comment" spellcheck="true">// return it right away.</span>                conn <span class="token operator">=</span> <span class="token function">incProviderCountLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> cpr<span class="token punctuation">,</span> token<span class="token punctuation">,</span> callingUid<span class="token punctuation">,</span> callingPackage<span class="token punctuation">,</span> callingTag<span class="token punctuation">,</span>                        stable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span>stableCount<span class="token operator">+</span>conn<span class="token punctuation">.</span>unstableCount<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">.</span>proc <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>setAdj <span class="token operator">&lt;=</span> ProcessList<span class="token punctuation">.</span>PERCEPTIBLE_LOW_APP_ADJ<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// If this is a perceptible app accessing the provider,</span>                        <span class="token comment" spellcheck="true">// make sure to count it as being accessed and thus</span>                        <span class="token comment" spellcheck="true">// back up on the LRU list.  This is good because</span>                        <span class="token comment" spellcheck="true">// content providers are often expensive to start.</span>                        <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: before updateLruProcess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mProcessList<span class="token punctuation">.</span><span class="token function">updateLruProcessLocked</span><span class="token punctuation">(</span>cpr<span class="token punctuation">.</span>proc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: after updateLruProcess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: before updateOomAdj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>providerRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: before resolveContentProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cpi <span class="token operator">=</span> AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                        <span class="token function">resolveContentProvider</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>                            STOCK_PM_FLAGS <span class="token operator">|</span> PackageManager<span class="token punctuation">.</span>GET_URI_PERMISSION_PATTERNS<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: after resolveContentProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cpi <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> firstClass <span class="token operator">=</span> cpr <span class="token operator">==</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">long</span> ident <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// If permissions need a review before any of the app components can run,</span>                    <span class="token comment" spellcheck="true">// we return no provider and launch a review activity if the calling app</span>                    <span class="token comment" spellcheck="true">// is in the foreground.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requestTargetProviderPermissionsReviewIfNeededLocked</span><span class="token punctuation">(</span>cpi<span class="token punctuation">,</span> r<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: before getApplicationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        ApplicationInfo ai <span class="token operator">=</span>                            AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                                <span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>                                        cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                        STOCK_PM_FLAGS<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: after getApplicationInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ai <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"No package info for content provider "</span>                                    <span class="token operator">+</span> cpi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        ai <span class="token operator">=</span> <span class="token function">getAppInfoForUser</span><span class="token punctuation">(</span>ai<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cpr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentProviderRecord</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cpi<span class="token punctuation">,</span> ai<span class="token punctuation">,</span> comp<span class="token punctuation">,</span> singleton<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// pm is in same process, this will never happen.</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>ident<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: now have ContentProviderRecord"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cpr<span class="token punctuation">.</span><span class="token function">canRunHere</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// If this is a multiprocess provider, then just return its</span>                    <span class="token comment" spellcheck="true">// info and allow the caller to instantiate it.  Only do</span>                    <span class="token comment" spellcheck="true">// this if the provider is the same user as the caller's</span>                    <span class="token comment" spellcheck="true">// process, or can run as root (so can be in any process).</span>                    <span class="token keyword">return</span> cpr<span class="token punctuation">.</span><span class="token function">newHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG_PROVIDER<span class="token punctuation">,</span> <span class="token string">"LAUNCHING REMOTE PROVIDER (myuid "</span>                            <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null <span class="token operator">?</span> r<span class="token punctuation">.</span>uid <span class="token operator">:</span> null<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" pruid "</span> <span class="token operator">+</span> cpr<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>uid <span class="token operator">+</span> <span class="token string">"): "</span>                            <span class="token operator">+</span> cpr<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" callers="</span> <span class="token operator">+</span> Debug<span class="token punctuation">.</span><span class="token function">getCallers</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// This is single process, and our app is now connecting to it.</span>                <span class="token comment" spellcheck="true">// See if we are already in the process of launching this</span>                <span class="token comment" spellcheck="true">// provider.</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> mLaunchingProviders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mLaunchingProviders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> cpr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// If the provider is not already being launched, then get it</span>                <span class="token comment" spellcheck="true">// started.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">long</span> origId <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Content provider is now in use, its package can't be stopped.</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: before set stopped state"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            AppGlobals<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPackageStoppedState</span><span class="token punctuation">(</span>                                    cpr<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: after set stopped state"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed trying to unstop package "</span>                                    <span class="token operator">+</span> cpr<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// Use existing process if already started</span>                        <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: looking for process record"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        ProcessRecord proc <span class="token operator">=</span> <span class="token function">getProcessRecordLocked</span><span class="token punctuation">(</span>                                cpi<span class="token punctuation">.</span>processName<span class="token punctuation">,</span> cpr<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>proc <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> proc<span class="token punctuation">.</span>thread <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>proc<span class="token punctuation">.</span>killed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG_PROVIDER<span class="token punctuation">,</span>                                    <span class="token string">"Installing in existing process "</span> <span class="token operator">+</span> proc<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proc<span class="token punctuation">.</span>pubProviders<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: scheduling install"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                proc<span class="token punctuation">.</span>pubProviders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>name<span class="token punctuation">,</span> cpr<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">try</span> <span class="token punctuation">{</span>                                        <span class="token comment" spellcheck="true">//这里让 目标进程初始话 ContentProvider，这里进入 到ActivityThread 的 scheduleInstallProvider 方</span>                                        <span class="token comment" spellcheck="true">//法，provider 初始化以后，回调 publishContentproviders</span>                                    proc<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleInstallProvider</span><span class="token punctuation">(</span>cpi<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: before start process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            proc <span class="token operator">=</span> <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>processName<span class="token punctuation">,</span>                                    cpr<span class="token punctuation">.</span>appInfo<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">HostingRecord</span><span class="token punctuation">(</span><span class="token string">"content provider"</span><span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                            cpi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: after start process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>proc <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to launch app "</span>                                        <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">"/"</span>                                        <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid <span class="token operator">+</span> <span class="token string">" for provider "</span>                                        <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">": process is bad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span> null<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        cpr<span class="token punctuation">.</span>launchingApp <span class="token operator">=</span> proc<span class="token punctuation">;</span>                        mLaunchingProviders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cpr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>origId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: updating data structures"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Make sure the provider is published (the same provider class</span>                <span class="token comment" spellcheck="true">// may be published under multiple names).</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mProviderMap<span class="token punctuation">.</span><span class="token function">putProviderByClass</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> cpr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mProviderMap<span class="token punctuation">.</span><span class="token function">putProviderByName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cpr<span class="token punctuation">)</span><span class="token punctuation">;</span>                conn <span class="token operator">=</span> <span class="token function">incProviderCountLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> cpr<span class="token punctuation">,</span> token<span class="token punctuation">,</span> callingUid<span class="token punctuation">,</span> callingPackage<span class="token punctuation">,</span> callingTag<span class="token punctuation">,</span>                        stable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">checkTime</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"getContentProviderImpl: done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">grantEphemeralAccessLocked</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/*intent*/</span><span class="token punctuation">,</span>                    UserHandle<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>                    UserHandle<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span>Binder<span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//等待 ContentProvider 发布</span>        <span class="token comment" spellcheck="true">// Wait for the provider to be published...</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> timeout <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> CONTENT_PROVIDER_WAIT_TIMEOUT<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">.</span>provider <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">.</span>launchingApp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to launch app "</span>                            <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">"/"</span>                            <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid <span class="token operator">+</span> <span class="token string">" for provider "</span>                            <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">": launching app became null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>EventLogTags<span class="token punctuation">.</span>AM_PROVIDER_LOST_PROCESS<span class="token punctuation">,</span>                            UserHandle<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>                            cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                            cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">long</span> wait <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> timeout <span class="token operator">-</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_MU<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG_MU<span class="token punctuation">,</span>                            <span class="token string">"Waiting to start provider "</span> <span class="token operator">+</span> cpr                            <span class="token operator">+</span> <span class="token string">" launchingApp="</span> <span class="token operator">+</span> cpr<span class="token punctuation">.</span>launchingApp <span class="token operator">+</span> <span class="token string">" for "</span> <span class="token operator">+</span> wait <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        conn<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    cpr<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">.</span>provider <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        conn<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timedOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Note we do it afer releasing the lock.</span>            String callerName <span class="token operator">=</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> ProcessRecord record <span class="token operator">=</span> mProcessList<span class="token punctuation">.</span><span class="token function">getLRURecordForAppLocked</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>record <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    callerName <span class="token operator">=</span> record<span class="token punctuation">.</span>processName<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Slog<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Timeout waiting for provider "</span>                    <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">"/"</span>                    <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid <span class="token operator">+</span> <span class="token string">" for provider "</span>                    <span class="token operator">+</span> name                    <span class="token operator">+</span> <span class="token string">" providerRunning="</span> <span class="token operator">+</span> providerRunning                    <span class="token operator">+</span> <span class="token string">" caller="</span> <span class="token operator">+</span> callerName <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cpr<span class="token punctuation">.</span><span class="token function">newHolder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 注意两个方法<br> canRunHere 这个方法用于检查 provider 的配置属性，一般我们可能会这么配置provider</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hiray.androidlottie.TestContentProvider<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hiray.androidlottie<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>multiprocess</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:testprovider<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 配置了 multiprocess 属性值等于 true ，那么就符合 canRunHere 的条件，直接在调用者的进程 初始化 provider ，这里 newHolder 方法的 conn 参数 是null,因为不需要后续通过 conn 来进行加减计数</p><p> 后续注意 scheduleInstallProvider 方法，这里会回到客户端，看ActivityThread 的 同名方法， 利用 Handler 发送了一个 what = INSTALL_PROVIDER 的消息，来到 handleInstallProvider 方法 </p><pre class="line-numbers language-java"><code class="language-java">   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installContentProviders</span><span class="token punctuation">(</span>            Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ProviderInfo<span class="token operator">></span> providers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>ContentProviderHolder<span class="token operator">></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ProviderInfo cpi <span class="token operator">:</span> providers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                StringBuilder buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Pub "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>authority<span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ContentProviderHolder cph <span class="token operator">=</span> <span class="token function">installProvider</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">,</span> cpi<span class="token punctuation">,</span>                    <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/*noisy*/</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*noReleaseNeeded*/</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*stable*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cph <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cph<span class="token punctuation">.</span>noReleaseNeeded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cph<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publishContentProviders</span><span class="token punctuation">(</span>                <span class="token function">getApplicationThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里是安装好 ContentProvider 后，调用了服务端的 publishContentProviders 方法，使得服务端的 getContentProviderImpl 方法不再阻塞，也就是我们的 调用端的 insert 方法 不被阻塞 ，即 getContentResolver().insert(Uri.parse(“<a href="http://wwww.baidu.com/q/&quot;),null)" target="_blank" rel="noopener">http://wwww.baidu.com/q/&quot;),null)</a>; 这句代码执行</p><p> 继续看 installContentProviders 方法里面调用的 installProvider 方法 </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> ContentProviderHolder <span class="token function">installProvider</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span>            ContentProviderHolder holder<span class="token punctuation">,</span> ProviderInfo info<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> noisy<span class="token punctuation">,</span> <span class="token keyword">boolean</span> noReleaseNeeded<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ContentProvider localProvider <span class="token operator">=</span> null<span class="token punctuation">;</span>        IContentProvider provider<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>holder <span class="token operator">==</span> null <span class="token operator">||</span> holder<span class="token punctuation">.</span>provider <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER <span class="token operator">||</span> noisy<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Loading provider "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>authority <span class="token operator">+</span> <span class="token string">": "</span>                        <span class="token operator">+</span> info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Context c <span class="token operator">=</span> null<span class="token punctuation">;</span>            ApplicationInfo ai <span class="token operator">=</span> info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c <span class="token operator">=</span> context<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mInitialApplication <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                    mInitialApplication<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c <span class="token operator">=</span> mInitialApplication<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createPackageContext</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                            Context<span class="token punctuation">.</span>CONTEXT_INCLUDE_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManager<span class="token punctuation">.</span>NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Ignore</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to get context for package "</span> <span class="token operator">+</span>                      ai<span class="token punctuation">.</span>packageName <span class="token operator">+</span>                      <span class="token string">" while loading content provider "</span> <span class="token operator">+</span>                      info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>splitName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createContextForSplit</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>splitName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LoadedApk packageInfo <span class="token operator">=</span> <span class="token function">peekPackageInfo</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>packageInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// System startup case.</span>                    packageInfo <span class="token operator">=</span> <span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                localProvider <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">getAppFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">instantiateProvider</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                provider <span class="token operator">=</span> localProvider<span class="token punctuation">.</span><span class="token function">getIContentProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to instantiate class "</span> <span class="token operator">+</span>                          info<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" from sourceDir "</span> <span class="token operator">+</span>                          info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>sourceDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>                    TAG<span class="token punctuation">,</span> <span class="token string">"Instantiating local provider "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// XXX Need to create the correct context for this provider.</span>                localProvider<span class="token punctuation">.</span><span class="token function">attachInfo</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                            <span class="token string">"Unable to get provider "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>name                            <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            provider <span class="token operator">=</span> holder<span class="token punctuation">.</span>provider<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Installing external provider "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>authority <span class="token operator">+</span> <span class="token string">": "</span>                    <span class="token operator">+</span> info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ContentProviderHolder retHolder<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mProviderMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Checking to add "</span> <span class="token operator">+</span> provider                    <span class="token operator">+</span> <span class="token string">" / "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            IBinder jBinder <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>localProvider <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ComponentName cname <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                ProviderClientRecord pr <span class="token operator">=</span> mLocalProvidersByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cname<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"installProvider: lost the race, "</span>                                <span class="token operator">+</span> <span class="token string">"using existing local provider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    provider <span class="token operator">=</span> pr<span class="token punctuation">.</span>mProvider<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentProviderHolder</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>provider <span class="token operator">=</span> provider<span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>noReleaseNeeded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    pr <span class="token operator">=</span> <span class="token function">installProviderAuthoritiesLocked</span><span class="token punctuation">(</span>provider<span class="token punctuation">,</span> localProvider<span class="token punctuation">,</span> holder<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mLocalProviders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jBinder<span class="token punctuation">,</span> pr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mLocalProvidersByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cname<span class="token punctuation">,</span> pr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                retHolder <span class="token operator">=</span> pr<span class="token punctuation">.</span>mHolder<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                ProviderRefCount prc <span class="token operator">=</span> mProviderRefCountMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>jBinder<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prc <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_PROVIDER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"installProvider: lost the race, updating ref count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>noReleaseNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">incProviderRefLocked</span><span class="token punctuation">(</span>prc<span class="token punctuation">,</span> stable<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeContentProvider</span><span class="token punctuation">(</span>                                    holder<span class="token punctuation">.</span>connection<span class="token punctuation">,</span> stable<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//do nothing content provider object is dead any way</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    ProviderClientRecord client <span class="token operator">=</span> <span class="token function">installProviderAuthoritiesLocked</span><span class="token punctuation">(</span>                            provider<span class="token punctuation">,</span> localProvider<span class="token punctuation">,</span> holder<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>noReleaseNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        prc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProviderRefCount</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> client<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        prc <span class="token operator">=</span> stable                                <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ProviderRefCount</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> client<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                                <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ProviderRefCount</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> client<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    mProviderRefCountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jBinder<span class="token punctuation">,</span> prc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                retHolder <span class="token operator">=</span> prc<span class="token punctuation">.</span>holder<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> retHolder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 方法内部反射初始化了 ContentProvider ，调用 attachInfo 方法 ，给 provider 传入 context 上下文，并调用 ContentProvider 的onCreate 方法。</p><p> 目前为止，我们可以知道，整个调用过程初始化了很多东西，客户端服务端来回调用，才能初始化一个ContentProvider ，所以 provider 的初始化是一件非常耗时的过程。</p><p>客户端创建完成后，继续回到 AMS 的 getContentProviderImpl 方法的后半段。此时 客户端的 provider 已经安装完成，调用了服务端的 publishContentProviders . 这时候关注一下  getContentProviderImpl 最后等待 provider 安装完成阻塞的代码 </p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">.</span>provider <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cpr<span class="token punctuation">.</span>launchingApp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to launch app "</span>                            <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName <span class="token operator">+</span> <span class="token string">"/"</span>                            <span class="token operator">+</span> cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid <span class="token operator">+</span> <span class="token string">" for provider "</span>                            <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">": launching app became null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    EventLog<span class="token punctuation">.</span><span class="token function">writeEvent</span><span class="token punctuation">(</span>EventLogTags<span class="token punctuation">.</span>AM_PROVIDER_LOST_PROCESS<span class="token punctuation">,</span>                            UserHandle<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>                            cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                            cpi<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_MU<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG_MU<span class="token punctuation">,</span>                            <span class="token string">"Waiting to start provider "</span> <span class="token operator">+</span> cpr                            <span class="token operator">+</span> <span class="token string">" launchingApp="</span> <span class="token operator">+</span> cpr<span class="token punctuation">.</span>launchingApp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        conn<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    cpr<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        conn<span class="token punctuation">.</span>waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>publishContentProviders 方法 部分代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//取出 cpr ，并且给 provider 赋值,并且唤醒线程。并且做了缓存</span> ContentProviderRecord dst <span class="token operator">=</span> r<span class="token punctuation">.</span>pubProviders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_MU<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG_MU<span class="token punctuation">,</span> <span class="token string">"ContentProviderRecord uid = "</span> <span class="token operator">+</span> dst<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dst <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ComponentName comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mProviderMap<span class="token punctuation">.</span><span class="token function">putProviderByClass</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>                    String names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> dst<span class="token punctuation">.</span>info<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//缓存起来，后续 如果在此请求 此provider ，可以直接返回</span>                        mProviderMap<span class="token punctuation">.</span><span class="token function">putProviderByName</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">int</span> launchingCount <span class="token operator">=</span> mLaunchingProviders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> j<span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> wasInLaunchingProviders <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> launchingCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLaunchingProviders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> dst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            mLaunchingProviders<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                            wasInLaunchingProviders <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            j<span class="token operator">--</span><span class="token punctuation">;</span>                            launchingCount<span class="token operator">--</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>wasInLaunchingProviders<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mHandler<span class="token punctuation">.</span><span class="token function">removeMessages</span><span class="token punctuation">(</span>CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>dst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dst<span class="token punctuation">.</span>provider <span class="token operator">=</span> src<span class="token punctuation">.</span>provider<span class="token punctuation">;</span>                        dst<span class="token punctuation">.</span>proc <span class="token operator">=</span> r<span class="token punctuation">;</span>                        dst<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此整个 ContentProvider 的初始化流程结束。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ContentProvider </tag>
            
            <tag> 四大组件 </tag>
            
            <tag> 底层原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewDragHelper在遇到到clickable=true时 无法拖动View的问题解决过程</title>
      <link href="/2018/08/28/ViewDragHelper%E5%9C%A8%E9%81%87%E5%88%B0%E5%88%B0clickable-true%E6%97%B6-%E6%97%A0%E6%B3%95%E6%8B%96%E5%8A%A8View%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/08/28/ViewDragHelper%E5%9C%A8%E9%81%87%E5%88%B0%E5%88%B0clickable-true%E6%97%B6-%E6%97%A0%E6%B3%95%E6%8B%96%E5%8A%A8View%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>ViewDragHelper 使用很简单，看到一篇文章说如果支持ViewDragHelper的ViewGroup的子View设置了clickable = true会导致无法拖动子View。但是解决办法是从ViewDragHelper源码出发覆写了，<br>当时觉得虽然也能解决问题，但是我觉得可以从事件分发的角度来解决。</p><p>于是我自定义了一个非常简单的Layout来验证这件事：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NSLayout</span> <span class="token keyword">extends</span> <span class="token class-name">LinearLayout</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"NSLayout"</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">DragCallBack</span> <span class="token keyword">extends</span> <span class="token class-name">ViewDragHelper<span class="token punctuation">.</span>Callback</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryCaptureView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View child<span class="token punctuation">,</span> <span class="token keyword">int</span> pointerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">clampViewPositionHorizontal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View child<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> child<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">clampViewPositionVertical</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View child<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> child<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ViewDragHelper dragHelper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NSLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        dragHelper <span class="token operator">=</span> ViewDragHelper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DragCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dragHelper<span class="token punctuation">.</span><span class="token function">shouldInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dragHelper<span class="token punctuation">.</span><span class="token function">processTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布局文件</p><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.viewdraghelper.NSLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>clickable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.viewdraghelper.NSLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果发现设置clickable= true确实是没法拖动这个View。原因是因为clickable = true会导致这个View在ACTION_DOWN事件发生的时候就把事件接手了，当然了，由于后续事件还是要先经过NSLayout的onInterceptTouchEvent也就是说还会走shouldInterceptTouchEvent。而前面说过可以通过覆写<br>ViewDragHelper.CallBack的getViewHorizontalDragRange和getViewVerticalDragRange任意一个方法返回大于0的数值就可以解决这个问题。这样能解决的道理很简单，当返回了大于0的数值后，最后在MOVE事件来临的时候会触发后续的逻辑将mDragState置为STATE_DRAGGING，导致最后shouldInterceptTouchEvent返回true，直接拦截了后续事件，View只能接收到一个Cancel事件结束。</p><p>那么从事件分发的角度来说，也可以解决，其实这个问题和RecyclerView的Item点击情况有点像，当DOWN事件发生，如果没有Move，直接UP就会点击Item,如果发生了Move就会滚动RecyclerView这中情形下的item 点击和这里的View设置了clickable = true接收了事件是一样的，RecyclerView的滚动和View被拖动是一样，可以一一对应起来。只不过RecyclerView可以处理好是自己内部处理得好。这里我们可以这样处理，当DOWN事件发生的时候，我们copy这个DOWN事件保存起来，如果后续有Move事件，那么说明是要拖动View，把之前保存的DOWN手动分发给ViewDragpHelper，走拖动逻辑。</p><p>修改之后的NSLayout代码只改变了一点：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> MotionEvent downEv<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            downEv <span class="token operator">=</span> MotionEvent<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>downEv <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>downEv<span class="token punctuation">)</span><span class="token punctuation">;</span>                downEv <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dragHelper<span class="token punctuation">.</span><span class="token function">shouldInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路很简单，就是保存DOWN事件，后续发生Move，就认为是要拖动View，把之前保存的DOWN事件重放一遍，让ViewDragHelper认为是一次完整的事件流。<br>这样处理同样也可以解决问题。UltraPtr这个库里面就有很多地方像这样手动分发事件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ViewDragHelper </tag>
            
            <tag> 拖动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ProducerArbiter</title>
      <link href="/2018/08/16/ProducerArbiter/"/>
      <url>/2018/08/16/ProducerArbiter/</url>
      
        <content type="html"><![CDATA[<h3 id="Producer并不是一层不变"><a href="#Producer并不是一层不变" class="headerlink" title="Producer并不是一层不变"></a>Producer并不是一层不变</h3><p>前面说过Subscriber可以通过setProducer设置Producer，而且这个方法也是支持并发调用的，意味着我们的Producer是可能不断变化的————换个说法————我们的数据源可能会改变。关于Producer的逻辑看这个<a href="/2018/08/15/RxJava中的-Producer/" title="RxJava中的 Producer">RxJava中的 Producer</a>。但是那篇文章没有提到的是，如果我们的Producer在中途改变了，会发生什么情况。举个例子(这个例子实际来自RxJava开发者的一篇进阶<a href="https://blog.piasy.com/AdvancedRxJava/2016/07/02/operator-concurrency-primitives-7/" target="_blank" rel="noopener">博文</a>)。这个系列的文章真的非常不错，能够看到很多我们不会注意到的问题，也可以窥见早期RxJava实现上的一些影子，对于进一步理解Rx帮助很大。</p><p>给定两个Observable,希望观察第一个Observable，当一个Observable结束之后，观察第二个Observable，第二个Observable结束了，那么才会结束,自定义了一个TheObserve操作符：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThenObserve</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Observable<span class="token punctuation">.</span>Operator</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ThenObserve</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>other <span class="token operator">=</span> other<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Subscriber<span class="token operator">&lt;</span>T<span class="token operator">></span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    other<span class="token punctuation">.</span><span class="token function">unsafeSubscribe</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            child<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Observable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> source <span class="token operator">=</span> Observable                <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThenObserve</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TestSubscriber<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestSubscriber</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ts<span class="token punctuation">.</span><span class="token function">requestMore</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    ts<span class="token punctuation">.</span><span class="token function">getOnNextEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果输出了1到30一共30个数字，并不像预想的先输出1-10 然后输出剩下的11-20 一共20个数字。<br>我们知道Subscriber可以向上游请求数据，如果没有设置Producer，内部有个requested计数器会将这个请求先保存起来，待到调用了setProducer的时候会把请求传递到上游。<br>而问题在于这个计数器只负责累计计数，并不会在请求已经到达的时候，减去已经完成的请求。那么在这个例子导致的问题就是第一个range(1,10)发出了10个数后，紧接着数据源变成了range(11,90),此时这个range(11,90)依然得到这个 数值为20的requested计数器 ，所以依然发射了 20个数字，所以最后导致一共产生了30个数据。那么应对这种数据源发生变化的场景我们需要用到ProducerArbiter。<br><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --></p><p>先修改这个例子，让ProducerArbiter正确的发挥作用，首先，ProducerArbiter的作用是作为中间枢纽，充当上下游的Producer，Producer发生改变对于上下游是透明的。</p><p>修改后：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThenObserve</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Observable<span class="token punctuation">.</span>Operator</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ThenObserve</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>other <span class="token operator">=</span> other<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ProducerArbiter arbiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerArbiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Subscriber<span class="token operator">&lt;</span>T<span class="token operator">></span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    arbiter<span class="token punctuation">.</span><span class="token function">produced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arbiter<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    child<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arbiter<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//产生新的subscriber用来接收producer的改变</span>                    DelegatingSubscriber<span class="token operator">&lt;</span>T<span class="token operator">></span> subscriber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingSubscriber</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> arbiter<span class="token punctuation">)</span><span class="token punctuation">;</span>                    child<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>                    other<span class="token punctuation">.</span><span class="token function">unsafeSubscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProducer</span><span class="token punctuation">(</span>Producer p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arbiter<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            child<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            child<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>arbiter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingSubscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>        Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span>  T<span class="token operator">></span> actual<span class="token punctuation">;</span>        ProducerArbiter arbiter<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DelegatingSubscriber</span><span class="token punctuation">(</span>Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span>  T<span class="token operator">></span> downstream<span class="token punctuation">,</span>ProducerArbiter arbiter<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>actual <span class="token operator">=</span> downstream<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>arbiter <span class="token operator">=</span> arbiter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arbiter<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>actual<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arbiter<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>actual<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>actual<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            arbiter<span class="token punctuation">.</span><span class="token function">produced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProducer</span><span class="token punctuation">(</span>Producer p<span class="token punctuation">)</span> <span class="token punctuation">{</span>           arbiter<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从最后的实现看，child Subscriber是消费者，需要从第一个range Observable和other Observable两处获取数据，由于数据源是不稳定的，所以child实际上只设置了ProducerArbiter一个Producer，实际Producer的切换交给了ProducerArbiter，这样数据源切换对于child 来说是透明的。<br>这里具体这做了三件事情：给child 设置ProducerArbiter；ProducerArbiter在数据源发生改变时切换到其他Producer；数据产生时调用producer(n)更新计数。</p><h3 id="ProducerArbiter-实现原理"><a href="#ProducerArbiter-实现原理" class="headerlink" title="ProducerArbiter 实现原理"></a>ProducerArbiter 实现原理</h3><p>如果是我们来实现ProducerArbiter以此满足上面 例子中的需要，其实我们要做的就是每次请求到来的时候增加计数，当有事件被消耗的时候减少计数，同时支持串行访问，从这样的角度我们再去看ProducerArbiter的源码，可能就会比较容易理解。一共有四个方法：</p><ul><li><code>java public void request(long n)</code></li><li><code>java public void setProducer(Producer newProducer)</code></li><li><code>java  public void produced(long n)</code></li><li><code>java  public void emitLoop()</code></li></ul><h4 id="request方法："><a href="#request方法：" class="headerlink" title="request方法："></a>request方法：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"n >= 0 required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>emitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                missedRequested <span class="token operator">+=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            emitting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> skipFinal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> r <span class="token operator">=</span> requested<span class="token punctuation">;</span>            <span class="token keyword">long</span> u <span class="token operator">=</span> r <span class="token operator">+</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                u <span class="token operator">=</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            requested <span class="token operator">=</span> u<span class="token punctuation">;</span>            Producer p <span class="token operator">=</span> currentProducer<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>            <span class="token punctuation">}</span>            <span class="token function">emitLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>            skipFinal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skipFinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    emitting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1) 用missedRequested保存没有处理的请求，因为并发访问的原因，此时可能有其他线程在调用，所以先保存起来。</p><p>2) skipFinal 实际上的作用是决定是否跳过最后的finally代码块（当然实际并不能跳过，finally代码块的作用只是为了预防emitLoop方法发生错误而没有安全的将emitting 置为false，导致一直阻塞后续的请求）。</p><p>3) 这里必须详细解释为什么是请求n，而不是requested。因为下游发出数据请求的时候，这些请求积累是发生在每个Producer上的，此刻的n实际是下游在向currentProducer请求，而requested是之前积累的，可能是之前的missedProducer上积累的请求，更加详细的逻辑会在emitLoop中。</p><p>4) emitLoop的作用实际就是真正调用实际的Producer 请求数据的过程。代码能够走到这一步说明emitting = false,此时没有来自其他线程的数据请求，执行emitLoop漏循环处理已经积累的请求。</p><h4 id="setProducer方法"><a href="#setProducer方法" class="headerlink" title="setProducer方法"></a>setProducer方法</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProducer</span><span class="token punctuation">(</span>Producer newProducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>emitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                missedProducer <span class="token operator">=</span> newProducer <span class="token operator">==</span> null <span class="token operator">?</span> NULL_PRODUCER <span class="token operator">:</span> newProducer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            emitting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> skipFinal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            currentProducer <span class="token operator">=</span> newProducer<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newProducer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                newProducer<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>requested<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>            <span class="token punctuation">}</span>            <span class="token function">emitLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            skipFinal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skipFinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    emitting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1) 如果传入的newProducer是null则会把missedProducer设置成NULL_PRODUCER，可以说是一个标记，在emitLoop中作为判断条件使用。<br>2) 请求了requested个，貌似和前面request方法的<strong>//3</strong>处有点不同，这是因为如果切换了Producer，那么之前的Producer没有生产的数据，再也不会有机会产生，所以这些<br>积累下的数据就应该全部交给新的Prodcuer来产生。</p><h4 id="emitLoop方法"><a href="#emitLoop方法" class="headerlink" title="emitLoop方法"></a>emitLoop方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">emitLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> localRequested<span class="token punctuation">;</span>            <span class="token keyword">long</span> localProduced<span class="token punctuation">;</span>            Producer localProducer<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                localRequested <span class="token operator">=</span> missedRequested<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>                localProduced <span class="token operator">=</span> missedProduced<span class="token punctuation">;</span>                localProducer <span class="token operator">=</span> missedProducer<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>localRequested <span class="token operator">==</span> 0L                        <span class="token operator">&amp;&amp;</span> localProduced <span class="token operator">==</span> 0L                        <span class="token operator">&amp;&amp;</span> localProducer <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//2</span>                    emitting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                missedRequested <span class="token operator">=</span> 0L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>                missedProduced <span class="token operator">=</span> 0L<span class="token punctuation">;</span>                missedProducer <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> r <span class="token operator">=</span> requested<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1</span>                <span class="token keyword">long</span> u <span class="token operator">=</span> r <span class="token operator">+</span> localRequested<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> u <span class="token operator">==</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                    requested <span class="token operator">=</span> r<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> v <span class="token operator">=</span> u <span class="token operator">-</span> localProduced<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"more produced than requested"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    r <span class="token operator">=</span> v<span class="token punctuation">;</span>                    requested <span class="token operator">=</span> v<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>localProducer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//2</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>localProducer <span class="token operator">==</span> NULL_PRODUCER<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentProducer <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    currentProducer <span class="token operator">=</span> localProducer<span class="token punctuation">;</span>                    localProducer<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//3</span>                Producer p <span class="token operator">=</span> currentProducer<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> localRequested <span class="token operator">!=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>localRequested<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>emitLoop方法比较长，直接看真的容易看不懂，我也是最开始卡在这里很久，后来发现最好是用单一Producer的角度分析，从简化的角度理解，如果此时一直都只有一个Producer,不存在Producer切换，那么可以认为此时的ProducerArbiter实际是一个普通的Producer，这里的emitLoop方法实际上处理的只是missedRequested，实际上和RangeProducer(以RangeProducer为例)的背压处理情况下的slowPath方法极度相似————不停的处理积累的请求直到把积累的请求完全处理完。</p><p>此时再来看emitLoop，其实只是多了Producer切换的情况，其实如果我们把Producer也看作是一种数据————没错！我们把Producer也看成是request一样，好比某处下游正在请求数据一样，只不过这个请求是请求切换Producer。对应请求数据，我们是寻找合适的Producer把请求发出去，对应Producer我们则应该是寻找合适的数据去发射。 此时我们再来看emitLoop的逻辑，退出漏循环的条件是所有的请求都处理完毕(准确说是：积累的请求处理完、该切换的Producer切换完毕以及累计处理完的事件计数完毕)，这里很容易理解。</p><p>1) 整个if语句块实际是进行已经消费的事件进行减法计数，减去已经消费的事件数</p><p>2) 如果localProducer（实际是missedProducer）不为空，表示存在Producer切换，不过还得继续判断（因为切换的时候可能是传的一个为null的Producer）,如果localProducer == NULL_PRODUCER实际上就是把当前的Producer设置成null了也就是不设置数据源，不然的话 切换数据源，并且把累计的请求处理完。</p><p>至此整个ProducerArbiter分析完毕，但是ProducerArbiter存在的问题是，没有保证事件是串行发射的，举个例子，此时前面的request正在被Producer A执行，正在发射事件给subscriber，但是紧接着切换了Producer B,此时Producer B也开始给Subscriber发射事件，这样导致的结果就是事件发射是并行的，必然会发生问题，这也显然不是我们想要的。其实我们这时候就需要ProducerObserverArbiter，看名字就是知道它还是个观察者。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RxJava </tag>
            
            <tag> Producer </tag>
            
            <tag> ProducerArbiter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava Scheduler一点理解</title>
      <link href="/2018/08/15/RxJava-Scheduler%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/"/>
      <url>/2018/08/15/RxJava-Scheduler%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="subscribeOn"><a href="#subscribeOn" class="headerlink" title="subscribeOn"></a>subscribeOn</h3><p>通过subscribeOn 和 ObserveOn 两个方法rxjava可以灵活的指定任务执行的线程和指定收到事件的线程<br>直接看源码：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">final</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">subscribeOn</span><span class="token punctuation">(</span>Scheduler scheduler<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requestOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">ScalarSynchronousObservable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ScalarSynchronousObservable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scalarScheduleOn</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">unsafeCreate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperatorSubscribeOn</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> scheduler<span class="token punctuation">,</span> requestOn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用了lift操作，看一下OperatorSubscribeOn这个操作符,重点是call方法：</p><pre class="line-numbers language-java"><code class="language-java">   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">final</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Worker inner <span class="token operator">=</span> scheduler<span class="token punctuation">.</span><span class="token function">createWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SubscribeOnSubscriber<span class="token operator">&lt;</span>T<span class="token operator">></span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubscribeOnSubscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> requestOn<span class="token punctuation">,</span> inner<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        subscriber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        subscriber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个SubscribeOnSubscriber类型的parent实际是个Action0,然后inner.schedule(parent)直接让这个任务在指定的线程执行了，<br>然后事件到来的时候，简单调用这个call方法参数传来的Subscriber 调用一下onNext onError onComplete就完了。嗯，其实也很简单，一下就懂了，就是把source Observable的订阅放到一个指定的Scheduler中执行，然后事件也会在所在的Scheduler中发出来。其实可以得出一个结论：无论subscribeOn调用多少次，调度都只会在第一次调用subscribeOn指定的线程中执行。比如一个Observable 调用了subscribeOn(Schedulers.io).subscribeOn(Schedulers.compution()),其实这样做的效果可以拆分看，第一次调用subscribeOn把调度指定在io线程，那么后面的调度就是想把  ‘把调度指定在io’ 的调度指定在computation线程，换个说法，我有一个操作是要指定调度在io线程 ，只不过我把这个操作放在了computation线程去执行而已，有种脱了什么放什么的多余+_+(实在找不出什么恰当的比喻了)。</p><p>我们以一个小栗子来看一下整个流程：</p><pre><code> val observable = Observable.create(Observable.OnSubscribe<int> { subscriber ->            Log.i("source===>", Thread.currentThread().name)            for (i in 0..0) {                subscriber.onNext(i)            }            subscriber.onCompleted()        }) val map = observable                .observeOn(Schedulers.computation())                .subscribeOn(Schedulers.newThread())                .map(Func1<int, string> { integer ->                    Log.i("map===>", Thread.currentThread().name)                    integer!!.toString()                }) map.observeOn(Schedulers.newThread())                .subscribe(Action1<string> { s -> Log.i("onNext===>", Thread.currentThread().name) })</string></int,></int></code></pre><p>首先创建一个简单的发射一个数字的Observable，然后调用map操作转换成string 然后打印出来。注意subscribeOn 和ObserveOn的位置，我们是先observeOn 然后subscribeOn<br>打印结果：</p><pre>    <code>    source===>: RxNewThreadScheduler-2    map===>: RxComputationScheduler-1    onNext===>: RxNewThreadScheduler-1    </code></pre><p>可以看到最后的onNext 调用并没有像预想的那样 发生在observeOn指定的computation 线程中，而是subscribeOn指定的创建的新线程中。<br>其实结合前面的subscribeOn的源码分析可以知道，调用subscribeOn之后的所有操作其实都会在subscribeOn 指定的线程中，这也是为什么map 和subscribe 两个操作都发生在RxNewThreadScheduler的原因。</p><h3 id="observeOn"><a href="#observeOn" class="headerlink" title="observeOn"></a>observeOn</h3><p>ObserveOn和SubscribeOn不太一样，subscribeOn方法是放在哪儿都可以调用多次也只有第一次调用的效果。ObserveOn也可以多次调用，但是每次都会生效，要理解清楚还得看代码，直接进入OperatorObserveOn操作符的call方法</p><pre><code>       @Override    public Subscriber<? super T> call(Subscriber<? super T> child) {        if (scheduler instanceof ImmediateScheduler) {            // avoid overhead, execute directly            return child;        } else if (scheduler instanceof TrampolineScheduler) {            // avoid overhead, execute directly            return child;        } else {            ObserveOnSubscriber<t> parent = new ObserveOnSubscriber<t>(scheduler, child, delayError, bufferSize);            parent.init();            return parent;        }    }</t></t></code></pre>不同的是 observeOn 的call方法是有返回值的，对于很多call方法有返回值的操作符，其实都可以认作是代理模式。包装了下游的subscriber，生成新的subscriber,然后让这个新的subscriber订阅上游observable,自己内部先处理，然后转发给下游的subscriber,达到代理的目的。我们再看一下这个ObserveOnSubscriber:1)<pre><code>         @Override        public void onNext(final T t) {            if (isUnsubscribed() || finished) {                return;            }            if (!queue.offer(NotificationLite.next(t))) {                onError(new MissingBackpressureException());                return;            }            schedule();        }</code></pre><p>当接收到上游发来的事件时，调用onNext,然后先存入队列，存入成功，则会执行schedule方法进行调度，schedule方法了解一下：</p><p>2)</p><p><pre><code><br>            protected void schedule() {<br>            if (counter.getAndIncrement() == 0) {<br>                recursiveScheduler.schedule(this);<br>            }<br>        }<br></code></pre><br>非常简单的一句，如果当前没有任务（发射事件）调度，那么开始，并且把计数器加一，这里实际是对多线程的考虑，同一时刻只能有一个线程进行调度 。结合上面的onNext方法一起看就是——————如果有任务，先放入队列，放不进去就调用onError，不然就调度，而调度的话又必须满足当前没有其他线程在调度。调度任务会执行ObserveOnSubscriber的call方法,这样就实现了线程切换。call方法内部就是让传进来的child subscriber接收上游的事件，到这里我们可以得出结论ObserveOn 其实只对ObserveOn调用之后的操作生效。举个例子(kotlin编写)：</p><p><pre><code><br> val ob = Observable.create(Observable.OnSubscribe<int> { t -&gt;<br>            t.onNext(1)<br>            t.onCompleted()<br>        })<br> ob.observeOn(Schedulers.io())<br>                .map { it-&gt;it.toString() }<br>                .observeOn(Schedulers.computation())<br>                .map { it-&gt; it.toCharArray() }<br>                .subscribe {  }<br></int></code></pre><br>上游简单发射一个Int数字,第一次调用ObserveOn 那么对于这第一个ObserveOn的操作符而言call方法传入的subscriber是下游map 生成的MapSubscriber,所以第一个map的操作发生在io线程，当同理第二个map 也会发生在computation线程。其实到这里可以总结出来ObserveOn方法的作用其实就是将之后的操作调度ObserveOn指定的线程中执行。</p><p>3)<br>call 方法实现：</p><p><pre><code><br>     @Override<br>        public void call() {<br>            long missed = 1L;//能进入到call这个方法，说明进入前，说明只有一次调度（就是本次调度）<br>            long currentEmission = emitted;<br>            final Queue<object> q = this.queue;<br>            final Subscriber&lt;? super T&gt; localChild = this.child;<br>            for (;;) {<br>                long requestAmount = requested.get();//获取下游的请求数量</object></code></pre></p><pre><code>            while (requestAmount != currentEmission) { //直到把下游的请求都发射完为止                boolean done = finished;                Object v = q.poll();                boolean empty = v == null;                if (checkTerminated(done, empty, localChild, q)) { //是否已经结束                    return;                }                if (empty) {                    break;                }                localChild.onNext(NotificationLite.&lt;T&gt;getValue(v));                currentEmission++;                if (currentEmission == limit) {                    requestAmount = BackpressureUtils.produced(requested, currentEmission);                    request(currentEmission);                    currentEmission = 0L;                }            }            if (requestAmount == currentEmission) {                if (checkTerminated(finished, q.isEmpty(), localChild, q)) {                    return;                }            }            emitted = currentEmission;            missed = counter.addAndGet(-missed);//如果不是0，其他线程可能也在请求，导致新的多个调度任务，那么还得继续处理，记录调度任务数量，进入下次循环，直到任务全部处理完为止            if (missed == 0L) {                break;            }        }    }</code></pre><p><br>大致逻辑梳理一下：</p><ul><li>首先声明了一个missed  = 1L记录需要调度的数量以及一个currentMission记录已经发射的事件数量；</li><li>一个for循环嵌套了一个while循环：<ol><li>while循环的作用就是发射事件，发射事件之前检查是否已经结束，结束的原因可能是已经结束了或者发生错误</li><li>每发射一个事件就计数</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RxJava </tag>
            
            <tag> Scheduler </tag>
            
            <tag> 线程调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava中的 Producer</title>
      <link href="/2018/08/15/RxJava%E4%B8%AD%E7%9A%84-Producer/"/>
      <url>/2018/08/15/RxJava%E4%B8%AD%E7%9A%84-Producer/</url>
      
        <content type="html"><![CDATA[<p>本文基于 rxjava 1.3.8</p><h3 id="背压"><a href="#背压" class="headerlink" title="背压"></a>背压</h3><p>Producer本身是作为沟通上下游的一个接口，只有一个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果传入的n是Long.MAX_VALUE，表明是放弃背压，上游会有多少就生产多少。比如range()操作符内部的RangeProducer，如果遇到n = Long.MAX_VALUE,直接用fastPath方法，一口气把事件全部发射出去，反之是请求多少生产多少。</p><p>但是平时我们调用range操作符，好像都没有考虑过什么背压，都是这样：</p><pre class="line-numbers language-java"><code class="language-java">            Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也同样是一口气把数据全部给我了，似乎也没有调用request(Long.MAX_VALUE)</p><h3 id="Range操作符内部"><a href="#Range操作符内部" class="headerlink" title="Range操作符内部"></a>Range操作符内部</h3><p>进入到range操作符，实际内部只有这么一句：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">final</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> childSubscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        childSubscriber<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RangeProducer</span><span class="token punctuation">(</span>childSubscriber<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>RangeProducer这个Producer实际上就是一个fastPath和slowPath，分别对应没有背压和有背压的情况</p><p>那么实际childSubscriber是下游的subscriber，也就是我们调用subscriber的时候new 出来的那个,那么问题来了，到这里都没有什么问题，为何range操作符还是会一口气把数据全部发射出去呢？这里setProducer我们漏掉了。<br>看一下setProducer做了什么。setProducer方法是subscriber的方法，这里很好理解，下游的subscriber需要数据属于消费者，消费者需要通知生产者，所以给消费者一个方法设置合适（不同场景下有不同的生产者）的生产者。</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProducer</span><span class="token punctuation">(</span>Producer p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> toRequest<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> passToSubscriber <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toRequest <span class="token operator">=</span> requested<span class="token punctuation">;</span>            producer <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriber <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// middle operator ... we pass through unless a request has been made</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>toRequest <span class="token operator">==</span> NOT_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// we pass through to the next producer as nothing has been requested</span>                    passToSubscriber <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// do after releasing lock</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>passToSubscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>            subscriber<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// we execute the request with whatever has been requested (or Long.MAX_VALUE)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>toRequest <span class="token operator">==</span> NOT_SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>                producer<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                producer<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>toRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方的注释其实已经是对这段代码的最简洁的解释了：如果Subscriber是通过Subscriber(Subscriber)或者Subscriber(Subscriber, boolean)方法设置了subscriber，那么就会对这个subscriber调用setProducer，反之如果没有设置subscriber并且已经有请求到来，那么就会直接调用producer.request(n)，其中n是已经累积的请求。</p><p>当然官方解释遗漏一个情况，那就是当没有设置subscriber，而且也没有请求到来的时候，那么就会调用producer.request(Long.MAX_VALUE),也就是让上游有多少就生产多少。</p><p>当然为了更容易明白这个方法的作用，总结一下：如果Subscriber自身设置了内部Subcriber那么会把这个producer设置给这个内部Subscriber;不然就请求上游（request(n))开始生产积累的数据,没有累积请求那就一口气全部生产完。有些时候我们要深刻理解前面半句，因为setProducer可能会形成很长的调用链:)。</p><p>回到最开始的具体的例子range(1,2).subscribe(subscriber),实际range操作内部那个childSubscriber 是我们new的那个subscriber（准确说是包装了之后的SafeSubscriber） 调用setProducer设置了RangeProducer。<br>由于我们new 的Subscriber是没有设置内置的subscriber的，那么最后实际会走到 “producer.request(Long.MAX_VALUE);”那句来，导致的结果就是RangeProducer 调用fastPath不考虑背压一口气全部生产完数据。</p><h3 id="多个操作符的情况"><a href="#多个操作符的情况" class="headerlink" title="多个操作符的情况"></a>多个操作符的情况</h3><p>这里我们有一个自定义的操作符，目的是过滤掉奇数，只要偶数：</p><pre class="line-numbers language-java"><code class="language-java">EvenFilter <span class="token keyword">implements</span> <span class="token class-name">Observable<span class="token punctuation">.</span>Operator</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">final</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Integer t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        child<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作符本身很简单，在onNext那里简单过滤了一下，看上去很完美。我们再写个例子：</p><pre class="line-numbers language-java"><code class="language-java">     Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EvenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑也很简单，最后打印出了 2，符合预期。我们再加上一个操作符take()</p><pre class="line-numbers language-java"><code class="language-java">     Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EvenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就出问题了，什么都没有打印。有点反常，因为加上了take(1),逻辑上是没有改变的，应该会输出一样的结果。 一直到lift(new EvenFilter())操作都是可以正常往下游发射数据的，那么为什么只是加入了take会变得奇怪导致没有数据打印。很明显问题出在take操作符上。</p><p>分析，必须给他分析————range操作符 childSubscriber.setProducer那句实际上childSubscriber是我们下游EventFilter call方法返回的Subscriber，由于EvenFilter 返回的这个Subscriber设置了child这个Subscriber，所以实际上还会调用这个child的setProducer<br>把RangeProuducer设置给这个child。而这个child实际又是下游take操作符内部返回的Subscriber ，take操作符返回的这个Subscriber的setProducer方法是这样的：</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProducer</span><span class="token punctuation">(</span><span class="token keyword">final</span> Producer producer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                child<span class="token punctuation">.</span><span class="token function">setProducer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// keeps track of requests up to maximum of `limit`</span>                    <span class="token keyword">final</span> AtomicLong requested <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>completed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// because requests may happen concurrently use a CAS loop to</span>                            <span class="token comment" spellcheck="true">// ensure we only request as much as needed, no more no less</span>                            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">long</span> r <span class="token operator">=</span> requested<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">long</span> c <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> limit <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requested<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    producer<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里实际上是调用了下游的child Subscriber(就是我们最后new的Subscriber)setProducer，根据前面的总结，最后会调用这里这个匿名Producer的request方法，并且n = Long.MAX_VALUE,最后会走到producer.request(c)这句，而且c = limit,啊哈！！！！，因为我们是take(1) 所以limit = 1，上游的RangeProducer 生产一个数据之后就没了，没了！导致2不会被发射出来！</p><p>做一整个问题就出在take操作符这里，因为take认为自己只要一个数据，所以只向上游请求了一个数据，这其实非常符合take的逻辑，然而它的上游，可以认为此时take的上游是我们的EvenFilter，EvenFilter自身数据来自range，而不是对range发来的数据做缓存，然后根据下游的请求来发射偶数2。所以这里与其说是take的错误，不如说是我们的Operator实现不够完美。那么我们这里其实有三种解决办法，一种是简单的修改EvenFilter</p><ul><li><p>request(1)</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Integer t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      child<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样达到的效果是，如果符合要求，发往下游，不然请求下一个数据，这样所有的数据都会被发射出来</p></li><li><p>使用filter操作符<br>或者是使用rxjava提供的操作符，因为我们的EvenFilter实在有点多次一举，只是简单的过滤偶数，可以使用filter操作符：</p><pre class="line-numbers language-java"><code class="language-java">  Observable<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token annotation punctuation">@Override</span>                  <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">return</span> <span class="token punctuation">(</span>integer <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用其余的构造方法返回Subscriber<br>由于我们的EvenFilter返回的Subscriber使用的是Subscriber(subscriber)构造方法，所以使得 会调用child.setProducer，这里我们使用空的构造方法：</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*child*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Integer t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"inner: "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        child<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么这样可以呢，因为这样就不会调用child的setProducer,而是返回的这个Subscriber的setProducer，根据前面总结的，由于这个Subscriber没有内置的Subscriber,最后会导致调用RangeProducer的 request(Long.MAX_VALUE),一口气生产全部的数据</p><p>其实这个例子暗含一个教训，我们在实现自己的操作符的时候尽量不要去使用Subscriber(subscriber)这个构造方法返回Subscriber给上游，因为导致的问题是我们操作符自己被跨越了，下游和上游单独在联系，跨越了操作符自己，导致有些问题不能按照上游到下游一条连贯的线去思考，容易出现一些反常识的bug。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RxJava </tag>
            
            <tag> Producer </tag>
            
            <tag> 背压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rxjava retryWhen和repeatWhen操作符原理</title>
      <link href="/2018/08/08/Rxjava-retryWhen%E5%92%8CrepeatWhen%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%8E%9F%E7%90%86/"/>
      <url>/2018/08/08/Rxjava-retryWhen%E5%92%8CrepeatWhen%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h3><p>因为最近使用了mvvm，不再用mvp,并且大量使用RxJava 简化一些场景下的操作。以至发现了一个操作符retryWhen，搜了一些资料，几乎都是 一位叫DanLew的外国人写的一篇文章或者其译文。原文在这<a href="https://blog.danlew.net/2016/01/25/rxjavas-repeatwhen-and-retrywhen-explained/" target="_blank" rel="noopener"> &gt;&gt; </a>,思路清晰，知道了怎么用，一些关键的注意点，但就是没有分析具体原理和流程是怎样(但是看他提到的一些词，应该是搞明白了内部原理的)。痛定思痛————当然也是觉得这个操作符非常有意思，所以仔细研究一番。（说实话，我也是最近才觉得RxJava有些源码真的值得好好翻一翻）。本文基于rxjava 1.3.8。</p><h3 id="retryWhen和repeatWhen真的不一样吗"><a href="#retryWhen和repeatWhen真的不一样吗" class="headerlink" title="retryWhen和repeatWhen真的不一样吗"></a>retryWhen和repeatWhen真的不一样吗</h3><p>先看下retryWhen的方法：</p><pre class="line-numbers language-java"><code class="language-java">      <span class="token keyword">public</span> <span class="token keyword">final</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token keyword">final</span> Func1<span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">,</span>Observable<span class="token operator">></span> notificationHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> OnSubscribeRedo<span class="token punctuation">.</span>&lt;T<span class="token operator">></span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InternalObservableUtils<span class="token punctuation">.</span><span class="token function">createRetryDematerializer</span><span class="token punctuation">(</span>notificationHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再看repeatWhen:</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">final</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">repeatWhen</span><span class="token punctuation">(</span><span class="token keyword">final</span> Func1<span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span> Void<span class="token operator">></span><span class="token punctuation">,</span> Observable<span class="token operator">></span> notificationHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> OnSubscribeRedo<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>         InternalObservableUtils<span class="token punctuation">.</span><span class="token function">createRepeatDematerializer</span><span class="token punctuation">(</span>notificationHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 几乎可以认为是一样的，除了对传入的handler处理稍微不同以外。另外参数上有点小不一样，retryWhen的参数内的泛型是Observable<throwable>,<br> repeatWhen的参数泛型则是Observable<void>。这和两者响应的事件不一样，retry是对错误响应，发生错误了该选择是否重试；repeat则是对完成事件响应，数据发射完之后是否重试，完成事件是没有数据的所以是Void。</void></throwable></p><p>不过我看到这个方法最大的两个疑惑是：为什么不是Func1&lt;Throwable,Boolean&gt;类型的参数，根据给的异常返回true false决定是否重试不是很合理吗？？然后马上反应过来，返回Observable会更灵活，如果重试的逻辑很复杂，单纯根据一个bool 的true or false来决定是否重试，是满足不了一些场景下的需要的。</p><p> retryWhen方法上有一段注释：</p><pre class="line-numbers language-html"><code class="language-html">    Returns an Observable that emits the same values as the source observable with the exception of an {@code onError}. An {@code onError} notification from the source will result in the emission of a{@link Throwable} item to the Observable provided as an argument to the {@code notificationHandler}    function. If that Observable calls {@code onComplete} or {@code onError} then {@code retry} will call {@code onCompleted} or {@code onError} on the child subscription. Otherwise, this Observable will resubscribe to the source Observable.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 具体含义就是，这个操作符会返回一个Observable(记作o1),o1会发射和源observable一样的数据（源observable可能会抛出异常）。当源Observable 发射错误事件时，会将这个错误传递给一个Observable(记作o2),而这个o2会作为参数传给notificationHandler。因为notificationHandler 返回的也是一个Observable(o3),如果o3 后续发射了complete或者error事件（其实就是调用了onComplete或者onError），那么会导致child subscription 也调用onComplete或者onError,结束整个流程，不然的话（也就是调用了onNext），那么将会重新订阅源Observable——————也就是再次激活源Oservable。</p><p> 翻译的有点啰嗦。简而言之就是，我用一个代理Subscriber去订阅源Obsevable，从源Observable获取数据，没有发生错误的情况下，就和一个普通正常的Observable的一样，数据发射完了就结束了。不同的是，头可能发生错误，抛出异常，针对这种情况，我们选择怎么处理。给我们的处理方式就是，我给你一个Observable<throwable>,当源Observable发射错误事件的时候，下游想从源Observable重新尝试订阅（也就是retry的含义）。而repeatWhen则只是稍微不同，repeatWhen响应的是源Observable的complete事件，就是当数据发射完了，是否重新订阅，重复的从源Observable获取数据。</throwable></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java">           retryCount <span class="token operator">=</span> <span class="token number">0</span>            Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observable<span class="token punctuation">.</span>OnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span><span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err                        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Throwable<span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">ArithmeticException</span> <span class="token operator">&amp;&amp;</span> retryCount <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"retry ++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    retryCount<span class="token operator">++</span><span class="token punctuation">;</span>                                    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no retry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个必然抛出算术异常的Observable。重试的逻辑是超过三次就放弃重试。这里是直接Observable.just(“”)触发的重试，以及Observable.empty()结束整个流程</p><p>这样写是没问题的，但是既然是返回Observable，那么我直接 这样：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span><span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Observable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">ArithmeticException</span> <span class="token operator">&amp;&amp;</span> retryCount <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"retry ++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    retryCount<span class="token operator">++</span><span class="token punctuation">;</span>                                    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no retry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然是不可以的，这样的话是返回一个和err无关的Observable，Observable.just(“”) 和Observable.empty()把事件发射完毕后，整个流程也就结束了，我们的订阅者也会取消订阅，不再接收消息。所以根本就是没有发挥这个操作符的效果。那么为什么我不使用参数err 这个Observable就会无效？</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>为了搞清楚为什么我们不使用传入的err这个Observable，就会导致retryWhen操作符失效，还是从方法本身入手</p><p>retryWhen方法实际返回的是这个</p><pre class="line-numbers language-java"><code class="language-java">  OnSubscribeRedo<span class="token punctuation">.</span>&lt;T<span class="token operator">></span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InternalObservableUtils<span class="token punctuation">.</span><span class="token function">createRetryDematerializer</span><span class="token punctuation">(</span>notificationHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> InternalObservableUtils.createRetryDematerializer(notificationHandler) 这句代码的实际返回的是<br> 一个 RetryNotificationDematerializer 作用是把Observable<notification>转换成Observable<throwable> ，然后传给我们自己定义的notificationHandler作为参数 然后返回一个新的Observable</throwable></notification></p><p>==========go on 2108.8.10(今天又看了下，又有新的发现，之前的分析漏了点东西，不过也更加发觉 1.x版本的一些东西确实写的复杂了，结构不清晰)</p><p>继续看内部逻辑（省略一些过于细节的细节[不然语言又是罗哩罗嗦]，需要对源码比较熟悉，最好先看一遍）：</p><pre class="line-numbers language-java"><code class="language-java">   <span class="token keyword">final</span> Subject<span class="token operator">&lt;</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> terminals <span class="token operator">=</span> BehaviorSubject<span class="token punctuation">.</span>&lt;Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">final</span> Subscriber<span class="token operator">&lt;</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> dummySubscriber <span class="token operator">=</span> Subscribers<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// subscribe immediately so the last emission will be replayed to the next</span>        <span class="token comment" spellcheck="true">// subscriber (which is the one we care about)</span>   terminals<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>dummySubscriber<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被 这三句话坑了很久，还让我看了BehaviorSubject的源码很久，发现这几句就是废话，有没有都行。看他的注释，意思是为了后面我们关心的subscriber能够获取到最近的那个事件，先订阅再说。（实际上最近的那个事件根本不存在）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Action0 subscribeToSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Subscriber<span class="token operator">&lt;</span>T<span class="token operator">></span> terminalDelegatingSubscriber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">boolean</span> done<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            terminals<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>Notification<span class="token punctuation">.</span><span class="token function">createOnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            terminals<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>Notification<span class="token punctuation">.</span><span class="token function">createOnError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>T v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            child<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">decrementConsumerCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            arbiter<span class="token punctuation">.</span><span class="token function">produced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>精简了n多代码。这个subscribeToSource Action0的意思就是 新建了一个terminalDelegatingSubscriber订阅源Observable，就是一个代理订阅者，主要的目的是关注源Observable发出的complet 和error事件。为什么是关注complete和error呢，因为这前面说过retryWhen和repeatWhen本质上的逻辑是一样的，只不过retryWhen关注的是<br>error,repeatWhen关注是complete。complete 和error都被包装成了Notification，然后发射出去。</p><p>继续：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Observable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> restarts <span class="token operator">=</span> controlHandlerFunction<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>                terminals<span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token operator">&lt;</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">final</span> Subscriber<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> filteredTerminals<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span>filteredTerminals<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                filteredTerminals<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                filteredTerminals<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isOnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stopOnComplete<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    filteredTerminals<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isOnError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stopOnError<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    filteredTerminals<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    filteredTerminals<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProducer</span><span class="token punctuation">(</span>Producer producer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                producer<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里稍微复杂一点，从里往外看，里面是terminals.lift操作了一下，主要逻辑在返回的新的Subscribeder的onNext这里，也就是对前面发过来的<br>Notificaiton拦截判断处理一下。一共有三种情况（其实就是决定retry和repeat的地方）：</p><p> 1) t.isOnCompleted() &amp;&amp; stopOnComplete 条件如果满足 对应的是retryWhen 结束不会重试<br> 2）t.isOnError() &amp;&amp; stopOnError 条件满足 对应的是repeatWhen 结束，不会重复<br> 3）这种情况下我们针对retryWhen看，如果收到的是一个error事件，很明显前面两个条件都不会满足，直接来到这里，调用onNext,传递给下游</p><p>我们把这个terminal.lift之后得到的Observable记作 o1。之后这个o1会作为参数传递给我们的controlHandler<br> 。前面说过这个controlHandler不是我们自己定义的那个notificationHandler，而是经过包装之后的RetryNotificationDematerializer。所以controlHandler.call(o1)这句代码展开就是：</p><pre class="line-numbers language-java"><code class="language-java">    notificationHandler<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ERROR_EXTRACTOR<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 进一步展开：</p><pre class="line-numbers language-java"><code class="language-java">    notificationHanlder<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func1</span><span class="token operator">&lt;</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Throwable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Throwable <span class="token function">call</span><span class="token punctuation">(</span>Notification<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们定义的notificationHandler里的Observable<throwable>是这么来的。加上我们自己添加的逻辑之后返回一个名为restarts的Observable</throwable></p><p>最后，schedule了一个匿名的任务Action0:</p><pre class="line-numbers language-java"><code class="language-java">     worker<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                restarts<span class="token punctuation">.</span><span class="token function">unsafeSubscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Object t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span><span class="token function">isUnsubscribed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>consumerCapacity<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                worker<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>subscribeToSource<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                resumeBoundary<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这个任务让restarts进行订阅（为了方便起见，我们把这个匿名的Subscriber记为s1），然后在收到next事件的时候，执行前面的subscribeToSource任务，也就是向源Observable发起订阅的任务。</p><p>那么这里的bug出现了，该怎么触发subscribeToSource这个任务呢？？？？？？？ 我们可以从后往前推，要触发这个subscribeToSource必须上游<br>调用onNext吐出事件来，而这里的上游就是restarts,也就是terminals terminals要吐出事件来，必须依赖源Observable吐出事件, 这里就形成了一个互相依赖的困境！！<!-- restarts是什么？是我们自己对传入的err那个Observable做变换以后返回的，所以如果我们做的变换逻辑里面如果发出了事件，那么才会导致这里 s1的onNext进行调用 --><br>termials本身既是Observable也是一个Observer,所以terminals.lift 的目的是对自己发出的事件进行拦截 ，但是自己一开始并没有发出事件，然后把这个lift之后的ob传给我们定义的notificationHandler，所以——————最开始的事件还是必须由我们发出来！！</p><p>其实是child.setProducer那一行，会导致调用request(Long.MAX_VALUE)，导致subscribeToSource被调用了<br>所以入口就是这句话，然后发生错误，会回调到我们自定义的错误处理逻辑那里，我们前面提到过，为什么不使用传入的err会导致无效，<br>因为整个链式调用断开了，返回的restarts是我们自己的Observable，那么导致的结果就是，我们用自己的Observable订阅了那个匿名Subscriber，<br>可能调用一次onNext，然后就结束了。虽然后面确实会调用work.schedule(subscribeToSource)那一行代码，但是由于child已经结束了，订阅关系没了，这个subscribeToSource是不会执行的。但是如果换成是对err进行变换返回的Observable就不一样了，在接收到源Observable 发来的error的时候，会往下传递，一直走到我们的对error处理的逻辑，如果我们的处理是返回了一个Observable.just(“”)之类的，那么下游必然会接收到，也就是在匿名Subscriber那里的onNext调用，导致重新订阅源Observable，不然的话调用onComplete或者onError结束整个流程。</p><p>最后我也看了 2.0.0的retryWhen的代码，做了很多修改，整体上来看，结构更加的清晰更容易看明白。所以建议直接看2.0.0的，没有这么绕。</p><p>===写的太乱了（Rx确实有些绕，绕明白了，还是很好理解的）==不定期修改此博文</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rxjava </tag>
            
            <tag> Operator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于事件机制的总结</title>
      <link href="/2018/04/19/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/19/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>事件分发影响到自定义控件以及处理一些特殊问题时候特别有用，一直没有总结一下，导致<br>在碰到问题的时候思路不够清晰，其实对于单个View的事件分发其实很简单，稍微复杂点的其实<br>是在有ViewGroup的情况下。也不用举什么例子，直接就总结吧：<br>针对单个View<br>所有的事件都从ACTION_DOWN开始，入口是dispatchTouchEvent,因为对于单个View没有拦截之说，所以在dispatchTouchEvent里面只是判断View有没有设置touch监听或者点击，如果有，那么事件就接管了，后续的事件都会直接发给这个View</p><p>针对ViewGroup：<br>一共有三个方法 dispatchTouchEvent onInterceptTouchEvent onTouchEvent,主要是说清楚这三个方法之间的关系</p><p>dispatchTouch一样是入口，同样是从ACTION_DOWN开始，先是在dispatchTouchEvent里面调用了onInterceptTouchEvent，问ViewGroup自己需要拦截吗，如果拦截了，那么后续事件就交给ViewGroup的onTouchEvent,当然后续事件调用的方法顺序就是：dispatchTouchEvent(ViewGroup)————&gt;onTouchEvent(ViewGroup);但是如果ACTION_DOWN事件被子View接管了，那么后续事件的调用的顺序：<br>dispatchTouchEvent(ViewGroup)————&gt;onInterceptTouchEvent(ViewGroup)————&gt;onTouchEvent(View)<br>但是如果View接管了事件，但是后续事件被ViewGroup拦截了的话，那么View还是会收到一个Cancel事件。</p><p>其中ACTION_DOWN没有被ViewGroup拦截的情况下子View接受了ACTION_DOWN事件，然而后续事件还会先通过ViewGroup的onInterceptTouchEvent然后发给子View，其实这个机制的设计是非常有意思的，因为有些情况（或者说很多情况）下我们在手指下去的时候还无法判断究竟谁来接管事件，但是到了发生Move这一步，我们基本上就可以知道怎么处理了。比如每天都用到的RecyclerView，我们既可以滑动Item也可以点击，就是靠这个机制才得以实现的，当手指下去然后松手这中间没有Move直接UP，那么就是一个点击事件，发生Move则会判定为滑动。</p><p>以上的总结本身在ViewGroup的onInterceptTouchEvent方法中有注释，之前没耐心看，最近因为和事件分发走的近，必须好好看懂这一块</p><p>总之View只有一次机会来接管事件，也就是在ACTION_DOWN传过来的时候，不然以后都没机会了，直到下一次ACTION_DOWN来临。假如谁都不管这个事件，那么最后就会一直冒泡到Activity的onTouchEvent中去（这个很好验证，写个空白布局，重写下Activity的onTouchEvent，里面打个日志就知道了 ）因为如此，Android也推出了嵌套滚动，其实就是让子View无脑接管事件，但是呢，会在处理事件前先给parent处理，然后剩下的给自己，这样就让有些不好实现的效果（比如联动）好做很多</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 事件分发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于DataBinding的一些知识</title>
      <link href="/2018/04/11/%E5%85%B3%E4%BA%8EDataBinding%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/04/11/%E5%85%B3%E4%BA%8EDataBinding%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Android的DataBinding出来很久了，但是因为我一直用的mvp，出来的时候就简单的 开启了enable =true这句代码弄了下搞了个简单的layout布局就没管了（好吧，貌似只能算单向绑定=_=）。然后最近想深入的看下DataBinding，比如自定义的控件怎么实现双向绑定,一步一步来吧，其实东西真的不多，不过很强大,基本都是注解。</p><p>###简单的绑定<br>先建立一个Worker类：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> workerId<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> wage<span class="token punctuation">;</span>    <span class="token keyword">public</span> String photoUrl<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> photoId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Worker</span><span class="token punctuation">(</span><span class="token keyword">int</span> workerId<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> wage<span class="token punctuation">,</span> <span class="token keyword">int</span> photoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>photoId <span class="token operator">=</span> photoId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个简单的布局文件(data_binding_layout.xml)，在TextView上显示Worker的名字：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>worker<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hiray.mvvm.mvvm.model.Worker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{worker.name}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会根据布局文件名字生成一个ViewDataBinding对象————DataBindingLayoutBinding,在代码中设置一下：</p><pre class="line-numbers language-java"><code class="language-java">       <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataBindingActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataBindingLayoutBinding binding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>data_binding_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>                binding<span class="token punctuation">.</span><span class="token function">setWorker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token number">1205</span><span class="token punctuation">,</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是非常简单的一种绑定，只是单向的数据绑定，数据映射到UI上<br>关于这样的单向绑定有好几个注解</p><h3 id="BindingMethods、BindingMethod"><a href="#BindingMethods、BindingMethod" class="headerlink" title="BindingMethods、BindingMethod"></a>BindingMethods、BindingMethod</h3><p>比如我想给ImageView加上自定义的属性下载图片</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>worker<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hiray.mvvm.mvvm.model.Worker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">app:</span>imageDrawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{worker.photoId}<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里”app:imageDrawable”这个属性是无法被识别的，会编译出错，我们要通过某种方式告诉系统该怎么做。我们建立一个类 ViewBindingAdapter，使用BindingMethods和BindingMethod注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@BindingMethods</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@BindingMethod</span><span class="token punctuation">(</span>                type <span class="token operator">=</span> ImageView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                attribute <span class="token operator">=</span> <span class="token string">"app:imageDrawable"</span><span class="token punctuation">,</span>                method <span class="token operator">=</span> <span class="token string">"setImageResource"</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageAttr</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中type是你要绑定的类，attribute是你自己定的,method是ImageView中的方法，也就是告诉ImageView，在xml中碰到app:imageDrawable属性的时候调用ImageView的setImageResource方法。<br>但是如果我此时不想传入图片id，而是传入一个id的String字符，那怎么办呢，因为ImageView并没有接收String参数来设置图片的方法，那么我们要利用BindConversion转换一下</p><h3 id="BindingConversion"><a href="#BindingConversion" class="headerlink" title="BindingConversion"></a>BindingConversion</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageAttr</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindingConversion</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertStringToResId</span><span class="token punctuation">(</span>String idString<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>idString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是有些时候即使转换了，也没有对应的setter方法可以使用，比如你设置drawableLeft这种属性的时候，是没有setDrawableLeft方法的，只有setCompoundDrawable,那么这时候就可以使用 BindingAdapter这个注解了</p><h3 id="BindingAdapter"><a href="#BindingAdapter" class="headerlink" title="BindingAdapter"></a>BindingAdapter</h3><p>顾名思义是绑定适配器，如果像设置的属性没有直接的方法，需要转换一下，那么就用到这个注解，比如设置drawableLeft,是没有setDrawableLeft方法的，必须调用view的setCompoundDrawables</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageAttr</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BindingAdapter</span><span class="token punctuation">(</span><span class="token string">"app:drawableLeft"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bindDrawableLeft</span><span class="token punctuation">(</span>TextView view<span class="token punctuation">,</span> Drawable leftDrawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        view<span class="token punctuation">.</span><span class="token function">setCompoundDrawables</span><span class="token punctuation">(</span>leftDrawable<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="InverseMethod"><a href="#InverseMethod" class="headerlink" title="InverseMethod"></a>InverseMethod</h3><p>在双向绑定中，需要对值进行转换<br>比如我们有个checkbox，如果model中的一个String类型的值是“Alice”就让checkbox选上，反之不勾选，这里就要用到InverseMethod注解<br>新建一个Converter类，写了两个静态方法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Converter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@InverseMethod</span><span class="token punctuation">(</span><span class="token string">"convertStringToBool"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">convertBoolToString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"Alice"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">"Unknown"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">convertStringToBool</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Alice"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布局文件：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hiray.mvvm.mvvm.model.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hiray.mvvm.mvvm.attr.Converter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v7.widget.AppCompatCheckBox</span>            <span class="token attr-name"><span class="token namespace">android:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@<span class="token punctuation">=</span>{Converter.convertStringToBool(person.personName)}<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给自定义控件支持双向绑定"><a href="#给自定义控件支持双向绑定" class="headerlink" title="给自定义控件支持双向绑定"></a>给自定义控件支持双向绑定</h3><p>这里有个自定义的BlinkView，不停的闪烁，由一个bool 类型的值 blink控制是否闪烁，伪代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlinkView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Paint paint<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> blink <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlink</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> blink<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blink <span class="token operator">=</span> blink<span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getBlink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> blink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setBlink</span><span class="token punctuation">(</span><span class="token operator">!</span>blink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onBlinkChangeListener <span class="token operator">!=</span> null<span class="token punctuation">)</span>            onBlinkChangeListener<span class="token punctuation">.</span><span class="token function">onBlinkChange</span><span class="token punctuation">(</span>blink<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnBlinkChangeListener</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onBlinkChange</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> blink<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> OnBlinkChangeListener onBlinkChangeListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnBlinkChangeListener</span><span class="token punctuation">(</span>OnBlinkChangeListener onBlinkChangeListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onBlinkChangeListener <span class="token operator">=</span> onBlinkChangeListener<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>layout文件中：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hiray.mvvm.mvvm.model.DataHolder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.hiray.mvvm.mvvm.widget.BlinkView</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>blink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@<span class="token punctuation">=</span>{data.blink}<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>blinkColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorAccent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写显然不会有任何效果，建立一个名为BlinkViewAdapter的类，使用InverseBindingMethods注解告诉Android在遇到app:blink属性的时候怎么把数据映射到UI上，然后又要告诉AndroidUI怎么映射到数据上，代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@InverseBindingMethods</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@InverseBindingMethod</span><span class="token punctuation">(</span>type <span class="token operator">=</span> BlinkView<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                attribute <span class="token operator">=</span> <span class="token string">"blink"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlinkViewAdapter</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    @InverseBindingAdapter(attribute = "app:blink")</span><span class="token comment" spellcheck="true">//    public static boolean isBlink(BlinkView view) {</span><span class="token comment" spellcheck="true">//        return view.getBlink();</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token annotation punctuation">@BindingAdapter</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"app:blinkChanged"</span><span class="token punctuation">,</span> <span class="token string">"app:blinkAttrChanged"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> requireAll <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setListener</span><span class="token punctuation">(</span>BlinkView view<span class="token punctuation">,</span> BlinkView<span class="token punctuation">.</span>OnBlinkChangeListener listener<span class="token punctuation">,</span>                                   <span class="token keyword">final</span> InverseBindingListener attrChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attrChange <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> listener <span class="token operator">!=</span> null<span class="token punctuation">)</span>            view<span class="token punctuation">.</span><span class="token function">setOnBlinkChangeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> view<span class="token punctuation">.</span><span class="token function">setOnBlinkChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlinkView<span class="token punctuation">.</span>OnBlinkChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBlinkChange</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> blink<span class="token punctuation">)</span> <span class="token punctuation">{</span>                attrChange<span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中InverseBindingMethod注解有三个参数：type表示你要绑定的类，attribute就是你要进行绑定的属性（就是写在xml上的属性），method默认按照属性名字去找有没有 isXX 或者getXX方法，不然你就写上method名字，如果没有直接的method名字，可以使用InverseBindingAdapter注解（代码中注释的部分），这是告诉系统在UI发生变化的时候调用什么方法获取UI信息这里Android默认是按照属性名字去找有没有 xxAttrChanged的（如果你自己没有定义的话），当然这个event可以自己定义，比如你定义成”abcdefg&amp;%##$”,那么上面setListener方法的BindingAdapter注解的”app:blinkAttrChanged”也得改成这个。<br>另外setListener有三个参数，第一个是控件BlinkView自己，第二个是BlinkView.OnBlinkChangeListener 和”app:blinkChanged”对应；第三个是InverseBindingListener是必须的，这个参数的实现在编译期就生成了，就是通知系统UI变化了，要更新ui信息到数据上（更新的方法就是前面的第一部分），可以看下生成的attrChange:</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token keyword">private</span> android<span class="token punctuation">.</span>databinding<span class="token punctuation">.</span>InverseBindingListener mboundView3blinkAttrChange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>databinding<span class="token punctuation">.</span>InverseBindingListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Inverse of data.blink</span>            <span class="token comment" spellcheck="true">//         is data.setBlink((boolean) callbackArg_0)</span>            <span class="token keyword">boolean</span> callbackArg_0 <span class="token operator">=</span> mboundView3<span class="token punctuation">.</span><span class="token function">getBlink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// localize variables for thread safety</span>            <span class="token comment" spellcheck="true">// data.blink</span>            <span class="token keyword">boolean</span> dataBlink <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// data != null</span>            <span class="token keyword">boolean</span> dataJavaLangObjectNull <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// data</span>            com<span class="token punctuation">.</span>hiray<span class="token punctuation">.</span>mvvm<span class="token punctuation">.</span>mvvm<span class="token punctuation">.</span>model<span class="token punctuation">.</span>DataHolder data <span class="token operator">=</span> mData<span class="token punctuation">;</span>            dataJavaLangObjectNull <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dataJavaLangObjectNull<span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">.</span><span class="token function">setBlink</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>callbackArg_0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里其实就明白了，这里生成的东西都是根据前面的注解来的，收到刷新提示就会调用方法获取UI信息，并且更新数据模型中的值，由此完成了整个的双向的绑定</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> DataBinding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自行处理Fling导致RecyclerView 滑动点击事件无效</title>
      <link href="/2018/04/02/%E8%87%AA%E8%A1%8C%E5%A4%84%E7%90%86Fling%E5%AF%BC%E8%87%B4RecyclerView-%E6%BB%91%E5%8A%A8%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%97%A0%E6%95%88/"/>
      <url>/2018/04/02/%E8%87%AA%E8%A1%8C%E5%A4%84%E7%90%86Fling%E5%AF%BC%E8%87%B4RecyclerView-%E6%BB%91%E5%8A%A8%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>之前写过StackLayoutManager,一个自定义的LayoutManager，最近有同学说滑动之后item 点击无效，发现是滑动之后第一次点击无效，再次点击才能触发点击事件。第一反应觉得很诧异，要么就不触发，怎么还要点击两次才能触发的。带着疑问我调试了一下RecyclerView的onInterceptTouchEvent方法。结果是fling一次后点击item ，onInterceptTouchEvent方法返回了true，也就是事件被拦截了，就是导致Item无法点击的原因，拦截的条件是mScrollState == STATE_DRAGGING。但是明显现在应该处于STATE_IDLE状态，fling之后手指已经离开屏幕了。所以继续追踪，发现RecyclerView的fling事件内部自己有处理，而且fling完之后，会将mScrollState重置为STATE_IDLE，但是因为StackLayoutManager是使用的setOnFlingListener方式，导致没有重置状态，所以之后的第一次点击mScrollState仍然处于STATE_DRAGGING状态，所以被拦截了。但是我们是第二次点击又是可以的，所以肯定是第一次点击的某个地方将mScrollState重置为STATE_IDLE了，找了下，发现RecyclerView的onTouchEvent方法有这么一句</p><pre class="line-numbers language-java"><code class="language-java">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xvel <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> yvel <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">fling</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> xvel<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> yvel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setScrollState</span><span class="token punctuation">(</span>SCROLL_STATE_IDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>知道了前因后果之后，我们要做的就是自己处理fling之后应该将mScrollState重置为idle状态，但是RecylerView改变状态的方法并不对外暴露，所以最后我用了反射。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
            <tag> Fling ItemClick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于AndroidStudio下的idea目录</title>
      <link href="/2018/01/24/%E5%85%B3%E4%BA%8EAndroidStudio%E4%B8%8B%E7%9A%84idea%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/01/24/%E5%85%B3%E4%BA%8EAndroidStudio%E4%B8%8B%E7%9A%84idea%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>这个目录一开始看名字只知道和我们工程的工作区间有关，到底是啥我没仔细看过。直到有一天，我不小心把这个文件的内容给删除了（可能是午睡趴在键盘上了），然后会导致工程一直报这个文件的错，于是乎我干脆把这个文件都删了。导致的结果是每次重新打开工程，之前打开过的文件全都不会自动打开，得一个个的点开，瞬间我就有点知道这个文件干嘛的了。其实就是记录我们最近的文件操作，比如你上次退出前打开过的文件，鼠标在哪个位置等等，比如：<br><img src="https://github.com/HirayClay/draft/blob/master/as-workspace.png?raw=true" alt><br>我最后鼠标停在红色标记处，也就是整个文件的第1行，第25个文字处</p><p>那么在workspace.xml文件中会产生这么一条记录：<br><img src="https://github.com/HirayClay/draft/blob/master/as-workspace-record-shot.png?raw=true" alt><br>应该是下标从0开始的原因，记录的line = 0,column =24<br>可能没有这条记录，ctrl+s强制保存一次就有了</p><p>当然workspace文件里面保存的还有其他信息，比如当然使用的gradle版本等信息</p><p>所以最后我自然就去其他工程拷贝了一份直接放到idea目录下就ok了</p>]]></content>
      
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于RecyclerView的一个有趣的事情</title>
      <link href="/2018/01/19/%E5%85%B3%E4%BA%8ERecyclerView%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/"/>
      <url>/2018/01/19/%E5%85%B3%E4%BA%8ERecyclerView%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>对于RecylcerView ，基本上第一印象就是View重用，但是真的明白怎么重用的吗，最近在写自定义LayoutManager,由此对RecylerView、LayoutManager、ItemAnimator整个之间的关系都比较的熟悉。不过回到标题上来，这个有趣的事情和RV的回收有关。</p><p>比如页面上此时显示了前六条Item（第六个Item没有显示全），那么你肯定觉得不把第六条Item全部划进来，第七条就不会调用onCreateViewHolder进行创建；但事实是当我只要向上稍微滑出去一点就会创建第七个Item，这是不是和对RV的回收重用的印象有些矛盾？是的，按照常理，我根本都没有滑出第七个Item，你就创建了，好像不太对。</p><p>最后我看了下源码，其实原因比较简单，得先贴一下滑动发生时候调用填充逻辑的方法代码（部分代码）：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">int</span> <span class="token function">fill</span><span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>Recycler recycler<span class="token punctuation">,</span> LayoutState layoutState<span class="token punctuation">,</span>            RecyclerView<span class="token punctuation">.</span>State state<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stopOnFocusable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> remainingSpace <span class="token operator">=</span> layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">+</span> layoutState<span class="token punctuation">.</span>mExtra<span class="token punctuation">;</span>        LayoutChunkResult layoutChunkResult <span class="token operator">=</span> mLayoutChunkResult<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mInfinite <span class="token operator">||</span> remainingSpace <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> layoutState<span class="token punctuation">.</span><span class="token function">hasMore</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            layoutChunkResult<span class="token punctuation">.</span><span class="token function">resetInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">layoutChunk</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> state<span class="token punctuation">,</span> layoutState<span class="token punctuation">,</span> layoutChunkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutChunkResult<span class="token punctuation">.</span>mFinished<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            layoutState<span class="token punctuation">.</span>mOffset <span class="token operator">+=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed <span class="token operator">*</span> layoutState<span class="token punctuation">.</span>mLayoutDirection<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">!=</span> LayoutState<span class="token punctuation">.</span>SCROLLING_OFFSET_NaN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">+=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">+=</span> layoutState<span class="token punctuation">.</span>mAvailable<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">recycleByLayoutState</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> layoutState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> start <span class="token operator">-</span> layoutState<span class="token punctuation">.</span>mAvailable<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为当滑动发生的时候，填充的postion是从第七个Item开始的，所以第七个Item被创建了，但是呢，立马被 recycleByLayoutState(recycler, layoutState)这个方法给回收掉了，并且缓存了起来，毕竟第七个Item在屏幕外，所以被回收了，而且这个while跑了这一次就退出了，到了第七个Item真的出来的时候就直接从缓存里面取出来用了</p><p>Note：”scrap” View指的是仍然有效可以直接拿来重用的VH，只是暂时脱离了RV。名字让人很误解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -RecyclerView -Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle的一些小知识(不定期更新)</title>
      <link href="/2018/01/05/Gradle%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86-%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
      <url>/2018/01/05/Gradle%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86-%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="资源分包"><a href="#资源分包" class="headerlink" title="资源分包"></a>资源分包</h3><p>一次不小心点进去sourceSet进去，发现可以定义资源路径的;自己按照main目录下的结构一样创建了一个debug的SourceSet(新建的其他名字的都不行，debug和main可以)，然后在module的gradle中加入如下配置就等于是有两个res目录，这样可以让资源分类更清晰</p><pre class="line-numbers language-groovy"><code class="language-groovy">        sourceSets <span class="token punctuation">{</span>            debug <span class="token punctuation">{</span>                res<span class="token operator">.</span><span class="token function">srcDirs</span><span class="token punctuation">(</span><span class="token string">"src/debug/res_debug"</span><span class="token punctuation">,</span> <span class="token string">"src/debug/res"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得sync一下<br><img src="https://github.com/HirayClay/draft/blob/master/GradleSourceSet.png?raw=true" alt><br>最后生成apk的时候两个sourceSet的东西会合并</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gradle </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parcelable</title>
      <link href="/2018/01/05/Parcelable/"/>
      <url>/2018/01/05/Parcelable/</url>
      
        <content type="html"><![CDATA[<p>这里并不是要仔细说一遍Parcelable，而是看了一些Parcelable的国内博客，发现都是说怎么用。怎么用官方文档就有例子，而是有个点，没有一篇博客说出来（也有可能我看的不仔细？）。<br>这个疑惑估计你也有过，在使用Parcelable 序列化和序列化的时候都是write<strong> read</strong>方法调用，但是发现如果有两个相同类型的值，比如有两个int要序列化，我们是不是要调用writeInt两次，然后反序列化的时候调用两次readInt，那么问题来了，反序列化的时候调用readInt怎么就知道是拿到的正确的值，而不会拿反了，毕竟两个int呢。<br>就这个不大不小的点，一直没看到，当然我也想过，write<strong> readInt</strong>操作的值的顺序必须一致，不然就会错<br>写了一小段代码跑了下，确实必须按照顺序来，因为底层就是个指针在挪动，挨个读取，比如取一个int的值，就会挪动4字节，所以顺序错了有时会拿到错的值，甚至拿不到正确的值（读到null直接crash）</p><pre class="line-numbers language-java"><code class="language-java">    var name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span>    var nickName<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span>    var id<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>parcel<span class="token operator">:</span> Parcel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        id <span class="token operator">=</span> parcel<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        nickName <span class="token operator">=</span> parcel<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> parcel<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override fun <span class="token function">writeToParcel</span><span class="token punctuation">(</span>parcel<span class="token operator">:</span> Parcel<span class="token punctuation">,</span> flags<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parcel<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        parcel<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>nickName<span class="token punctuation">)</span>        parcel<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接崩了<br><img src="https://raw.githubusercontent.com/HirayClay/draft/master/ParcelableCrash.png" alt></p><p>这里有篇歪果仁写的<a href="https://www.sitepoint.com/transfer-data-between-activities-with-android-parcelable/" target="_blank" rel="noopener">博客</a>，很详细</p><p>The End</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Parcelable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinearLayoutManager源码阅读(滚动分析)</title>
      <link href="/2017/12/19/LinearLayoutManager%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E6%BB%91%E5%8A%A8%EF%BC%89/"/>
      <url>/2017/12/19/LinearLayoutManager%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E6%BB%91%E5%8A%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>实现自定义的通用的LayoutManager，但是卡住了，遂看下Android 官方的几种LayoutManager是如何优雅实现的，大致的以及一些细节都看懂了，但是还是没找到什么好办法解决自己的问题，不如趁着热度把自己的分析过程写下来，也给其他需要的Androider.其实真的要对RecyclerView有个全面的认识，其实LayoutManager、Adapter、动画以及测量流程等细节都是要清楚的，因为虽然说RV给人使用上非常灵活解耦，但是其实内部也是这几者的紧密配合才达到的效果，所以有一点不明白其他地方可能也就会很模糊看不下去。也不细分章节了，就按照滚动的流程来写。至于为什么从滚动开始分析，是因为看源码还是讲究切入点，从RecyclerView的滑动开始是最佳切入点，很直观，要是第一次直接就从onLayoutChildren看起，我觉得看不了几行就得放弃。当然这篇文章的内容很多没说清楚的其实都是onLayoutChildren的一些逻辑，所以都略过了，只关注滑动。</p><p>由于自定的LayoutManager如果要(肯定要，不然还定义啥)支持滚动都必须至少重写以下两个方法中的一个，并且返回true，分别表示支持垂直滚动和水平滚动</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canScrollHorizontally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canScrollVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在发生滚动的时候，会在以下两个方法回调滚动的距离dy/dx</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">scrollVerticallyBy</span><span class="token punctuation">(</span><span class="token keyword">int</span> dy<span class="token punctuation">,</span> Recycler recycler<span class="token punctuation">,</span> State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">scrollHorizontallyBy</span><span class="token punctuation">(</span><span class="token keyword">int</span> dx<span class="token punctuation">,</span> Recycler recycler<span class="token punctuation">,</span> State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们从LinearLayoutManager的垂直滚动分析起，进入scrollBy方法,</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">int</span> <span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token keyword">int</span> dy<span class="token punctuation">,</span> RecyclerView<span class="token punctuation">.</span>Recycler recycler<span class="token punctuation">,</span> RecyclerView<span class="token punctuation">.</span>State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> dy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//滚动发生时，是需要回收View的</span>        mLayoutState<span class="token punctuation">.</span>mRecycle <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">ensureLayoutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//手指向上滑动时dy>0</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> layoutDirection <span class="token operator">=</span> dy <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> LayoutState<span class="token punctuation">.</span>LAYOUT_END <span class="token operator">:</span> LayoutState<span class="token punctuation">.</span>LAYOUT_START<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> absDy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新LayoutState</span>        <span class="token function">updateLayoutState</span><span class="token punctuation">(</span>layoutDirection<span class="token punctuation">,</span> absDy<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> consumed <span class="token operator">=</span> mLayoutState<span class="token punctuation">.</span>mScrollingOffset                <span class="token operator">+</span> <span class="token function">fill</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> mLayoutState<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>consumed <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Don't have any more elements to scroll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> scrolled <span class="token operator">=</span> absDy <span class="token operator">></span> consumed <span class="token operator">?</span> layoutDirection <span class="token operator">*</span> consumed <span class="token operator">:</span> dy<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//layout view 结束，所有 View 整体平移；这里需要注意的是 LLM 并非是从头到尾一个个 layout view，而是先根据偏移把需要回收的 view 回收掉，会显示的view显示出来，最后进行整体的平移。想一想这样效率确实要高</span>        mOrientationHelper<span class="token punctuation">.</span><span class="token function">offsetChildren</span><span class="token punctuation">(</span><span class="token operator">-</span>scrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"scroll req: "</span> <span class="token operator">+</span> dy <span class="token operator">+</span> <span class="token string">" scrolled: "</span> <span class="token operator">+</span> scrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mLayoutState<span class="token punctuation">.</span>mLastScrollDelta <span class="token operator">=</span> scrolled<span class="token punctuation">;</span>        <span class="token keyword">return</span> scrolled<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写了部分注释，具体分析一下 updateLayoutState 方法<br>分析这个方法前，先看下LayoutState这个类，了解一下我们需要关注的几个重要参数的含义</p><p>mRecycle 表示是否需要回收View,滑动情况下这个值是true，但是在有item 添加删除的情况是false，因为锚点什么的得靠view来确定，不能回收</p><p>mOffset   layout View时候的起始坐标(垂直方向的LinearLayoutManager 表示y值)，e.g.比如发生滑动后，下一个item需要显示出来，那么mOffset的值就等于最后一个可见item的bottom值(不考虑margin，向上滑动)</p><p>mAvailable 表示可用距离，在layout View的时候用到</p><p>mCurrentPosition  表示获取View的起始索引，在layout View的时候循环取View的时候用到</p><p>mItemDirection  获取item 数据的方向，是从前到后（值为1），还是从后往前（值为-1），本篇分析的是正序情况</p><p>mExtra 在LayoutManager支持predictive动画的时候这个值很有用，具体的需要了解RV的动画机制才明白这个值怎么回事，简单的说就是即使一个item此时(当他即将进入RV可见范围时)对用户不可见，但是还是得把他layout出来，虽然已经超出了RV的边界用户看不到，这样做的目的是为了更好的动画体验（因为需要两次layout，一次pre-layout 一次post-layout来确定动画的起始和终止位置，不然就只能做最简单的fadeIn fadeOut。只有当item add remove发生时才有值，一般为0</p><p>再回过来看updateLayoutState方法(并不喜欢贴太长串的代码。。。)</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateLayoutState</span><span class="token punctuation">(</span><span class="token keyword">int</span> layoutDirection<span class="token punctuation">,</span> <span class="token keyword">int</span> requiredSpace<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> canUseExistingSpace<span class="token punctuation">,</span> RecyclerView<span class="token punctuation">.</span>State state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If parent provides a hint, don't measure unlimited.</span>        mLayoutState<span class="token punctuation">.</span>mInfinite <span class="token operator">=</span> <span class="token function">resolveIsInfinite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mLayoutState<span class="token punctuation">.</span>mExtra <span class="token operator">=</span> <span class="token function">getExtraLayoutSpace</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        mLayoutState<span class="token punctuation">.</span>mLayoutDirection <span class="token operator">=</span> layoutDirection<span class="token punctuation">;</span>        <span class="token keyword">int</span> scrollingOffset<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutDirection <span class="token operator">==</span> LayoutState<span class="token punctuation">.</span>LAYOUT_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLayoutState<span class="token punctuation">.</span>mExtra <span class="token operator">+=</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getEndPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// get the first child in the direction we are going</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> <span class="token function">getChildClosestToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// the direction in which we are traversing children</span>            mLayoutState<span class="token punctuation">.</span>mItemDirection <span class="token operator">=</span> mShouldReverseLayout <span class="token operator">?</span> LayoutState<span class="token punctuation">.</span>ITEM_DIRECTION_HEAD                    <span class="token operator">:</span> LayoutState<span class="token punctuation">.</span>ITEM_DIRECTION_TAIL<span class="token punctuation">;</span>            mLayoutState<span class="token punctuation">.</span>mCurrentPosition <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">+</span> mLayoutState<span class="token punctuation">.</span>mItemDirection<span class="token punctuation">;</span>            mLayoutState<span class="token punctuation">.</span>mOffset <span class="token operator">=</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getDecoratedEnd</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// calculate how much we can scroll without adding new children (independent of layout)</span>            scrollingOffset <span class="token operator">=</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getDecoratedEnd</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>                    <span class="token operator">-</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getEndAfterPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> View child <span class="token operator">=</span> <span class="token function">getChildClosestToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mLayoutState<span class="token punctuation">.</span>mExtra <span class="token operator">+=</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getStartAfterPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mLayoutState<span class="token punctuation">.</span>mItemDirection <span class="token operator">=</span> mShouldReverseLayout <span class="token operator">?</span> LayoutState<span class="token punctuation">.</span>ITEM_DIRECTION_TAIL                    <span class="token operator">:</span> LayoutState<span class="token punctuation">.</span>ITEM_DIRECTION_HEAD<span class="token punctuation">;</span>            mLayoutState<span class="token punctuation">.</span>mCurrentPosition <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">+</span> mLayoutState<span class="token punctuation">.</span>mItemDirection<span class="token punctuation">;</span>            mLayoutState<span class="token punctuation">.</span>mOffset <span class="token operator">=</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getDecoratedStart</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>            scrollingOffset <span class="token operator">=</span> <span class="token operator">-</span>mOrientationHelper<span class="token punctuation">.</span><span class="token function">getDecoratedStart</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>                    <span class="token operator">+</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getStartAfterPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mLayoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">=</span> requiredSpace<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>canUseExistingSpace<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLayoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">-=</span> scrollingOffset<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mLayoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">=</span> scrollingOffset<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面几行就是简单的赋值更新状态，然后是根据 layoutDirection 的方向进行其他参数的计算，我们这里是分析的手指上滑，对应的 layoutDireciton 是 LAYOUT_END ，我们进入layoutDirection == LayoutState.LAYOUT_END 成立的情况下去看：</p><p> 1.通过 getChildClosestToEnd 方法拿到RV最接近 End 的 child (如果是水平布局，那么end就是RV的right，垂直布局end就是RV的bottom)</p><p> 2.根据 mShouldReverseLayout 变量给 mItemDirection 赋值，我们一般都不使用逆序布局，所以 mItemDirection 的值是 ITEM_DIRECTION_HEAD ，也就是说待会在fill方法内部取 child 来放的时候是正序，也就是从前往后依次取，反之亦然</p><p> 3.根据刚才取到的 child 获取到其在 adapter 中的位置，加上mItemDirection后赋值给mCurrentPosition，这个好理解，mCurrentPosition表示的就是取child的开始索引，LayoutState里面有个next方法就是这么做的，可以看下代码</p><pre class="line-numbers language-java"><code class="language-java">        View <span class="token function">next</span><span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>Recycler recycler<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mScrapList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">nextViewFromScrapList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> View view <span class="token operator">=</span> recycler<span class="token punctuation">.</span><span class="token function">getViewForPosition</span><span class="token punctuation">(</span>mCurrentPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>            mCurrentPosition <span class="token operator">+=</span> mItemDirection<span class="token punctuation">;</span>            <span class="token keyword">return</span> view<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 4.给mOffset赋值，也就是下图最后一个item的bottom值，是后续依次放child的起始坐标<br> <img src="https://github.com/HirayClay/draft/blob/master/RV_LLM.png?raw=true" alt></p><p> 5.至于scrollingOffset就是上面这张图里面最后一个 item 底部距离 RV底部的距离，官方也有注释—-“不需要添加新的 children 的情况下滚动的最大距离”—–也就是说最后一个 item 刚好完全滚进来，但是又不会有新的 item 滚进来的意思</p><p> 6最后给 mAvailable 赋值为 requiredSpace，也就是此次滚动的距离,然后判断canUseExistingSpace 为 true 就减去刚才的 scrollingOffset；这里为什么要减去这个scrollingOffset呢，其实就是把这个零头减掉方便计算而已。这里可以详细解释一下为什么方便计算，比如 滑动的距离不够把最底部的一个 item 滑进来，那么是不是根本不涉及到 添加新 view ,也不用回收 view，这样就是高效的。具体表现在代码里就是 mAvailable 是负值， fill 方法 里面的 那个 for 循环根本不会执行。所以最后一句 mScrollingOffset 又把 scrollingOffset 保存起来了。最后所有 child 都放置好之后，返回消耗的滑动距离时候，在scrollBy方法那里<br>  最后又把这个值加上去了，就这句：</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token keyword">final</span> <span class="token keyword">int</span> consumed <span class="token operator">=</span> mLayoutState<span class="token punctuation">.</span>mScrollingOffset                <span class="token operator">+</span> <span class="token function">fill</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> mLayoutState<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  好了，这个方法看完了，进去fill方法，没有贴全部的代码，还是一块一块看紧凑点</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">!=</span> LayoutState<span class="token punctuation">.</span>SCROLLING_OFFSET_NaN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO ugly bug fix. should not happen</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">+=</span> layoutState<span class="token punctuation">.</span>mAvailable<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">recycleByLayoutState</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> layoutState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这句确实不太明白什么意思也不敢说我现在看明白了。外层这个if是为了避开首次初始化的情况，只有正常滑动的情况时候才会进来，但是滑动情况下 layoutState.mAvailable &lt; 0 这个条件只有在滑动距离过小不足以把最后一个item的底部完全滑进来的情况才满足，不过看官方的注释好像是有bug，可能就做了一个防御性的if判断，防止特殊情况发生把，就假设这个条件满足了，不做if里面的处理，好像也不会发生什么问题把，不过回头想一下mScrollingOffset这个字段的意思是“在不需要添加新的View时候能滑动的最大距离”，按照这么理解，当mAvailable&lt;0时候，说明滑动距离太小，没法把item底部全滑进来，最多也就只能滑动此次滑动的距离，所以这么处理之后mSrollingOffset就是此次滑动距离；所以这个TODO注释看的挺烦的，还以为是bug，让人很纠结是个什么bug-_-，最后recycleByLayoutState方法回收了一下此次滚动发生之后会越界不见的View</p><pre class="line-numbers language-java"><code class="language-java">       <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recycleByLayoutState</span><span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>Recycler recycler<span class="token punctuation">,</span> LayoutState layoutState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>layoutState<span class="token punctuation">.</span>mRecycle <span class="token operator">||</span> layoutState<span class="token punctuation">.</span>mInfinite<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mLayoutDirection <span class="token operator">==</span> LayoutState<span class="token punctuation">.</span>LAYOUT_START<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">recycleViewsFromEnd</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> layoutState<span class="token punctuation">.</span>mScrollingOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">recycleViewsFromStart</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> layoutState<span class="token punctuation">.</span>mScrollingOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据滑动方向选择是从后往前回收还是从前往后回收，我们考虑手指上滑，所以可能会有头部的View出界被滑出去，所以是调用的recycleViewsFromStart方法</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recycleViewsFromStart</span><span class="token punctuation">(</span>RecyclerView<span class="token punctuation">.</span>Recycler recycler<span class="token punctuation">,</span> <span class="token keyword">int</span> dt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dt <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Called recycle from start with a negative value. This might happen"</span>                        <span class="token operator">+</span> <span class="token string">" during layout changes but may be sign of a bug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ignore padding, ViewGroup may not clip children.</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> limit <span class="token operator">=</span> dt<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mShouldReverseLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                View child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientationHelper<span class="token punctuation">.</span><span class="token function">getDecoratedEnd</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">></span> limit                        <span class="token operator">||</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getTransformedEndWithDecoration</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">></span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// stop here</span>                    <span class="token function">recycleChildren</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                View child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientationHelper<span class="token punctuation">.</span><span class="token function">getDecoratedEnd</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">></span> limit                        <span class="token operator">||</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getTransformedEndWithDecoration</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">></span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// stop here</span>                    <span class="token function">recycleChildren</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看代码的第一句，如果 dt&lt;0 就直接返回结束了，这也解释了为什么前面的纠结为什么当mAvailable &lt; 0时候让 mScrollingOffset 加上 mAvailable,就是为了让这里传入的dt是正值，也就是实际发生的滑动距离。由于不考虑逆序布局，直接看第二个 for循环，其实这个循环要表达的意思是从头到尾遍历所有View直到找到一个滑动之后底部还没出界的View，那么在这个View之前的View全部要被回收掉。所谓回收掉就是把View节点从ViewHierarchy上删除掉了，但是被缓存起来了供重新绑定和重用。</p><p>继续往fill方法下面看，进入while循环</p><pre class="line-numbers language-java"><code class="language-java">      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mInfinite <span class="token operator">||</span> remainingSpace <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> layoutState<span class="token punctuation">.</span><span class="token function">hasMore</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            layoutChunkResult<span class="token punctuation">.</span><span class="token function">resetInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_TRACING<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TraceCompat<span class="token punctuation">.</span><span class="token function">beginSection</span><span class="token punctuation">(</span><span class="token string">"LLM LayoutChunk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">layoutChunk</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> state<span class="token punctuation">,</span> layoutState<span class="token punctuation">,</span> layoutChunkResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_TRACING<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TraceCompat<span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutChunkResult<span class="token punctuation">.</span>mFinished<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            layoutState<span class="token punctuation">.</span>mOffset <span class="token operator">+=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed <span class="token operator">*</span> layoutState<span class="token punctuation">.</span>mLayoutDirection<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * Consume the available space if:             * * layoutChunk did not request to be ignored             * * OR we are laying out scrap children             * * OR we are not doing pre-layout             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>layoutChunkResult<span class="token punctuation">.</span>mIgnoreConsumed <span class="token operator">||</span> mLayoutState<span class="token punctuation">.</span>mScrapList <span class="token operator">!=</span> null                    <span class="token operator">||</span> <span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">isPreLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">-=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// we keep a separate remaining space because mAvailable is important for recycling</span>                remainingSpace <span class="token operator">-=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">!=</span> LayoutState<span class="token punctuation">.</span>SCROLLING_OFFSET_NaN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">+=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">+=</span> layoutState<span class="token punctuation">.</span>mAvailable<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">recycleByLayoutState</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> layoutState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stopOnFocusable <span class="token operator">&amp;&amp;</span> layoutChunkResult<span class="token punctuation">.</span>mFocusable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要还有可用空间就依次取 View 并添加layout出来，之后更新mOffset和mAvailable,当然如果某个view是有焦点的，那么直接结束</p><p>看LayoutChunk方法，顾名思义，就是layout小块的意思，就是把单个的itemView放置到合适的位置，并且传入了一个LayoutResult用于记录放置Item后的信息，就几个字段：<br> mConsumed 消耗的距离<br> mFinished 是否结束layout<br> mIgnoreConsumed 是否忽略此次消耗的距离，滑动情况下这个值一直都是false<br> mFocusable 当前item是否有焦点</p><p> layoutChunk方法里面的逻辑，也没什么，就是测量，然后计算left top right bottom值。有一段逻辑比较重要，判断了mScrapList 是否为null，如果是null就调用了addDisappearingView方法，反之调用了addView;addView方法不用说就是简单的添加了View，但是addDisappearingView就是告诉RV，添加的这个View是马上就要移出屏幕的，注意是不可见了并不代表就是item被移除了也有可能是在屏幕之外。好了，我们再回头想象为什么是判断mScrapList为null就调用addDisappearingView。具体原因是mScapList其实绝大部分情况都是null，只有发生layout时候才不为空，而这个时候都是发生了item的增删改操作，导致有些View可能会超出RV的边界，也就是变成所谓的“hidden view”，不要被这个方法名迷惑，只是尝试加入hidden view，方法内部实际还是会根据flag判断之后决定是否需要hide 这个view。反过来mScrapList为null的时候就是对应滑动情况。</p><p>layoutChunk 方法内容不多，另外还需要注意的是这句：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">isItemRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> params<span class="token punctuation">.</span><span class="token function">isItemChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span>mIgnoreConsumed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 意思很简单，就是Item被删除了或者变化了，就忽略消耗，也就是不计入消耗。最开始我也觉得奇怪，后来知道动画之后明白这么做是有意义的，虽然这个Item被删除了，但是你不能立马就给不显示了还是添加进来，毕竟还有动画在这个Item要执行，所以就得等到这个Item的动画完了才删除。那么不计入消耗的好处就是，会多layout一个Item出来，就是在底部，屏幕外面，虽然不可见，如图：<br> <img src="https://github.com/HirayClay/draft/blob/master/rv_removed.png?raw=true" alt><br> item 2已经被移除了，并且item5会被加进来，但是在屏幕外我们看不到，等到item2动画结束item5就会滑进来。当然这个if判断在滑动情况下是不会进来的。</p><p> 最后，所有的view添加完之后，其实 view 并没有在正确的位置，所以整体又进行平移，至此整个滑动流程都结束。</p><p> 上面只是滑动的流程。实际上比较复杂的还是 出现 item 增删的时候，多次布局，并且配合 动画的时候。所以 RecyclerView 的架构设计真的很厉害，把很多东西组合在一起，还很优雅。</p><p>the end</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecyclerView LayoutManager LinearLayoutManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建个人博客</title>
      <link href="/2017/09/05/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/09/05/Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>很早之前就有人用hexo和github提供的page服务做个人博客了,不过了解一下就没有怎么关注了，最近有时间，看了一下官方文档，花了两个多小时，搭建了一个简单的个人博客，除了最开始搭建配置繁琐一点，后面写完一篇文章一个命令就发布，体验非常棒！</p><h3 id="新建主页仓库"><a href="#新建主页仓库" class="headerlink" title="新建主页仓库"></a>新建主页仓库</h3><p>登录自己的github账户，新建一个仓库，比如我的用户名是HirayClay，那么我就新建一个名为<br>HirayClay.github.io的仓库</p><h3 id="hexo环境搭建"><a href="#hexo环境搭建" class="headerlink" title="hexo环境搭建"></a>hexo环境搭建</h3><p>首先要安装必要的软件，<a href="https://nodejs.org" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>,安装完成之后安装hexo</p><pre class="line-numbers language-shell"><code class="language-shell">   $ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我安装的是 3.3.3版本<br>hexo安装好之后就可以用hexo命令创建一个站点了</p><pre class="line-numbers language-shell"><code class="language-shell">    $ hexo init <folder_name>    $ cd <folder>    $ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看一下创建的目录结构</p><pre><code>    .    ├── _config.yml    ├── package.json    ├── scaffolds    ├── source    |   └── _posts    └── themes</code></pre><p>其中_config.yml是配置文件，一些全局的重要配置都在这里面；package.json文件中声明了版本信息和依赖信息，scaffolds，即脚手架的意思，我们创建post的时候就是用的这个文件下的模板，里面默认有三种模板：draft、page、post，当然你也可以创建自己的模板；source目录下有个子目录_posts，顾名思义就是放我们文章的地方；最后themes就是存放主题的地方，可以下载三方的主题放在里面</p><p>我们需要重点关注一下_config.yml文件里面几个地方</p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">title</span><span class="token punctuation">:</span> Blog    <span class="token key atrule">subtitle</span><span class="token punctuation">:</span> hirayclay's blog    <span class="token key atrule">description</span><span class="token punctuation">:</span>    <span class="token key atrule">author</span><span class="token punctuation">:</span> hirayclay    <span class="token key atrule">language</span><span class="token punctuation">:</span> zh    <span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>title：站点的标题，subtitle：站点子标题，description：站点描述 language:站点语言，这里配置的是中文，其他语言的参考这里<a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" target="_blank" rel="noopener">&gt;&gt;</a>,timezone即时区，这里用的中国北京时区，其他时区参考<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">&gt;&gt;</a></p><p>要注意一点的是，这里所有的配置“：”后面都需要有一个空格，不然最后解析生成时候会失败，这是YAML的语法</p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title    <span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>new_post_name 即生成的post的名称，有一下几个配置：<br>:title<br>:year<br>:month<br>:i_month<br>:day<br>:i_day<br>我这里直接用title命名生成的post文件</p><p>比如执行一下命令</p><pre class="line-numbers language-shell"><code class="language-shell">    hexo new post "MyNewPost" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会在source/_posts目录下生成 MyNewPost.md文件</p><p>再看下语法高亮配置，比较简单，常用到的是否禁用和代码行数</p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">highlight</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署配置，第一步新建仓库的作用到了</p><pre class="line-numbers language-yaml"><code class="language-yaml">  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>HirayClay/HirayClay.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们用的git提交到远程仓库的，所以type = git,以及仓库地址和分支名，这里的repo就是之前新建的仓库地址</p><p>配置说完了，基本可以开写了</p><p>首先 用 hexo new post &lt;your_post_name&gt; 创建一篇博客，然后source/_posts目录找到对应的博客打开编辑即可,可以给博客加tag，比如本博客的tag</p><pre class="line-numbers language-yaml"><code class="language-yaml">   <span class="token punctuation">---</span>    <span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo+github搭建个人博客    <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2017-09-05 14:04:10</span>    <span class="token key atrule">tags</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> hexo        <span class="token punctuation">-</span> 博客    <span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此基本的都配置完成了，用以下命令生成静态资源</p><pre class="line-numbers language-shell"><code class="language-shell">    hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以写成</p><pre class="line-numbers language-shell"><code class="language-shell">    hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以本地起一个服务进行预览</p><pre class="line-numbers language-shell"><code class="language-shell">    hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 进行查看</p><p>用以下命令发布到git远程仓库</p><pre class="line-numbers language-shell"><code class="language-shell">    hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应该会弹出一个窗口让你你输入ssh-key的密码</p><p>最后如果觉得默认主题不合适，可以去下载其他<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>到 themes目录下，可以随意命名该目录下的主题文件夹，但是最后在_config.yml文件中配置主题时候一定要用文件夹的名字</p><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">theme</span><span class="token punctuation">:</span> theme_folder_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The End</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用模板写Span</title>
      <link href="/2017/09/05/SpanTextView/"/>
      <url>/2017/09/05/SpanTextView/</url>
      
        <content type="html"><![CDATA[<p>在之前的项目中，PM特别喜欢把一些文字做颜色或者大小上的区分，所以经常会用到Span，没有什么好的封装想法，只能老老实实的用原始的api，显得非常的笨，但是又没有什么办法，没想到什么好的封装策略，只是觉得这样写真的好难看啊。但是一般需要做特殊处理的文字其实都是后台返回的某些字段，是有特别含义的，比如“距离审核还有6天结束”中的‘6’其实就是后台会单独返回给你的。我们App这边拼接好整句话然后显示出来。当时在做这样的项目的时候也找过类似的开源库，但是觉得总觉得哪里不对，也懒得用，还是用的原始的套路，先数一数‘6’在字符串中的起始结束下标，然后设置Span。直到最近为了深入了解gradle，去看了下groovy，看到“Template engines”的时候突然想起之前的Span，于是有了一个大胆的想法。</p><h3 id="关于-Groovy的Template"><a href="#关于-Groovy的Template" class="headerlink" title="关于 Groovy的Template"></a>关于 Groovy的Template</h3><p>Groovy可以动态生成字符串，比如模板是这样的’${name} is ${age} years old! ‘<br>绑定关系是这样的：[name:”Alice”,age:”18”],那么生成的文字就是”Alice is 18 years old!”。你可能要问了，这和你说的Span有什么关系？？？当然有，前面我们说了，我们的需要设置Span的文字其实都是有含义的，我们用原始的api那样数出下标然后设置Span非常的无脑，根本没有体现出这个字段的含义，但是现在如果我们用groovy的方式，定义自己的模板那么”距离审核还有6天结束”的模板是不是就是”距离审核还有${day}天结束”，这样表达起来是不是更有内涵些，然后你又要问我，确实有内涵了，但这和Span又有什么关系呢？？好吧，也没什么关系，就是要有内涵一点，所以借用Groovy的思想重新封装对Span的处理。你可能还要问，不是已经有类似的库了吗，干嘛还要封装一个，比如Spanny。那好，我们看看Spanny怎么做的，</p><pre class="line-numbers language-java"><code class="language-java">    Spanny spanny <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spanny</span><span class="token punctuation">(</span><span class="token string">"距离审核还有"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ForegroundColorSpan</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"天结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>spanny<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对比我们定义好一个模板 “距离审核还有${day}天结束”，比较一下就看出不同了。Spanny的做法是希望需要什么样的Span就自己拼一个，虽然配合链式调用挺舒服的，其实给人的感觉就是很分离，并不像一句完整的句子那么看起来实在，个人觉得还是Groovy这样的模板很合适，毕竟当需要处理Span的时候，结构都是死的，所以用模板定义好结构是没有问题的，特别是当要处理的文字比较多的时候，这样拼接我觉得不太好，用定义的模板一眼看过去就非常的清晰明了。</p><h3 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h3><p>虽然引入了template的思想来动态生成字符串，同时又需要对key替换后的文字做对应的处理，那么要解决的问题有以下三个：<br>1 如何解析模板字符串<br>2 如何替换key并生成结果字符串<br>3 如何解决以上两个问题</p><p>关于第一个问题，看了下groovy解析模板的代码，自己做了一下修改差不多就是抄过来的，只是加入了一些额外的逻辑)<br>最后解析模板的代码是这样的：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>MarkInfo<span class="token operator">></span> <span class="token function">parseAndMark</span><span class="token punctuation">(</span>Reader reader<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reader<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>MarkInfo<span class="token operator">></span> markers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MarkInfo mark<span class="token punctuation">;</span>        StringWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'$'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        reader<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        c <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            String key <span class="token operator">=</span> <span class="token function">findKey</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//only true for text</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                String value <span class="token operator">=</span> binding<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//for text</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">int</span> start <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">int</span> end <span class="token operator">=</span> start <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    markers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MarkInfo</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//for image</span>                                    <span class="token keyword">int</span> start <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">int</span> end <span class="token operator">=</span> start <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    markers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MarkInfo</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"${"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//key not found</span>                                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            reader<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> markers<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String <span class="token function">findKey</span><span class="token punctuation">(</span>Reader reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringWriter stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'}'</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> stringBuilder<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法的作用就是记录模板中所有key的起始结束位置。比如原始模板是：”${name} is ${age} years old! “数据映射是[name:”Alice”,age:”18”],解析之后就变成”Alice is 18 years old! “。并且’Alice’ ‘18’两个数据在字符串中的位置被记录在了MarkrInfo中</p><p>我们来简单分析一下代码，一个简单的while循环，每次读取一个字符，每当读到’$’字符时认为可能是key要出现了，所以先在此处标记一下紧接着读取下一个字符，如果读到下一个字符是’{‘则认为key出现了，调用findKey方法读取’{‘和’}’之间的key值，如果为空则认为没有key，仅仅是读到了一个普通的”${}”，并且写入writer保存起来，如果key不为空认为读取到有效的key，记录key对应的value在字符串中的位置等信息，并且将value写入writer保存起来；如果’$’后面读到的不是’}’则认为只是读到了一个单独的’$’字符，虚惊一场，写入writer保存起来，并且把reader 重置，回到刚才标记的地方，也就是’$’的位置；如果读取的是普通的字符，直接写入writer.另外要说的就是ImageSpan的处理，由于有些字符最后是要替换成图片的，所以在binding中是没有其对应value的，所以当读取的key在binding中如果没有value，就认为这个key是要被替换成图片的，所以直接用key代替value，直接把key写入writer保存起来。</p><p>解析这一步完成以后我们其实得到了一个List<markerinfo>，记录了key被替换成value后的value在结果字符串中的位置信息，以及原始的key等信息。有了这些重要信息，就可以根据下标施加对应的Span了，以及一些点击事件的监听了。</markerinfo></p><p>施加Span的时候需要考虑文字和ImageSpan的差别，绝大多数时候是对文字的处理，不过有一种是把文字替换成图像，所以这个key在bingding中对应的就是个null,所以在施加span的时候都会判断一下是否为空，为空则说明是个ImageSpan,就不会做除了ImageSpan之外的任何处理</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpannableString </tag>
            
            <tag> TextView </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
